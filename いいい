問題1:
GitHub Marketplaceを使用することで、開発者が活用できる機能は何ですか？

〇他のGitHubコミュニティのメンバーと接続し、フォローし、チャットするための単一の場所
〇自分のGitHub Actionsやアプリを公開し、共有する能力
〇誰でも他の人に自分のGitHubアプリを販売できるストアフロント
〇GitHubのサブスクリプションを管理し、追加のGitHub Actionsストレージや時間を購入し、GitHubアプリにアクセスするための単一の場所
回答: 〇自分のGitHub Actionsやアプリを公開し、共有する能力

解説: GitHub Marketplaceは、開発者が自分の作成したGitHub Actionsやアプリを公開し、他のユーザーと共有するためのプラットフォームです。

問題2:
GitHubでコードスペース開発環境を作成する際、デフォルトのオペレーティングシステムは何で、リモート開発コンテナにサポートされていないプラットフォームは何ですか？

〇デフォルトOS: Ubuntu Linux 　サポートされていない: WindowsとmacOS
〇自分のイメージを提供すれば、好きなオペレーティングシステムがサポートされる
〇デフォルトOS: macOS 　WindowsとLinux
〇デフォルトOS: Windows 　macOSとLinux
回答: 〇デフォルトOS: Ubuntu Linux サポートされていない: WindowsとmacOS

解説: GitHub CodespacesのデフォルトのオペレーティングシステムはUbuntu Linuxであり、WindowsとmacOSはサポートされていません。

問題3:
次のうち、アイテム属性のリッチなビューを構築するための組み込みメタデータオプションではないものはどれですか？

〇タイムスタンプ
〇マイルストーン
〇ラベル
〇アサイン
回答: 〇アサイン

解説: アサインは、特定のタスクや問題に対して責任者を指定するためのものであり、リッチなビューを構築するためのメタデータオプションではありません。

問題4:
次のCODEOWNERSファイルに基づいて何が決定されますか？

*.tf   @acme/infrastructure
/docs/ @dani
〇「docs」フォルダー内のファイルの変更は、GitHubユーザー「dani」にレビューされる必要がある
〇「tf」拡張子のファイルの変更は、「infrastructure」ユーザーにレビューされる必要がある
〇GitHubユーザー「dani」は「docs」フォルダー内のすべての個別のコミットに対してコードオーナーシップを持っている
〇レビューの割り当ては、このCODEOWNERSファイルをリポジトリ内の「owners」フォルダーに配置することで行われる
回答: 〇「docs」フォルダー内のファイルの変更は、GitHubユーザー「dani」にレビューされる必要がある

解説: CODEOWNERSファイルは、特定のファイルやディレクトリに対するコードオーナーを指定し、そのオーナーが変更をレビューする必要があることを示します。

問題5:
Gitリポジトリで.gitignoreファイルを使用することが推奨される理由は何ですか？

〇リポジトリを公開から隠すため
〇リポジトリ内の機密ファイルを暗号化するため
〇特定のファイルやディレクトリをバージョン管理から除外するため
〇Gitコミットプロセスを高速化するため
回答: 〇特定のファイルやディレクトリをバージョン管理から除外するため

解説: .gitignoreファイルは、特定のファイルやディレクトリをGitのバージョン管理から除外するために使用されます。これにより、不要なファイルがリポジトリに含まれるのを防ぎます。

問題6:
デフォルトで、組織のメンバーにはどのような能力が付与されますか？

〇リポジトリやプロジェクトボードを作成する能力
〇コードレビューの割り当てを設定する能力
〇人を組織に招待する能力
〇組織内のプルリクエストレビューを管理する能力
回答: 〇リポジトリやプロジェクトボードを作成する能力

解説: 組織のメンバーは、デフォルトでリポジトリやプロジェクトボードを作成する能力を持っています。

問題7:
Nedは、組織内の重要または頻繁に使用されるリポジトリへのユーザーのアクセスを容易にしたいと考えています。どの組織設定を使用すればよいですか？

〇GitHubリポジトリインサイト
〇GitHub Discussions
〇GitHub CoPilot
〇ピン留めされたリポジトリ
回答: 〇ピン留めされたリポジトリ

解説: ピン留めされたリポジトリを使用することで、重要なリポジトリを目立たせ、ユーザーが簡単にアクセスできるようにすることができます。

問題8:
GitHub Actionsを使用する際、プルリクエストが開かれたときの正しい操作の順序は何ですか？

〇「アクション」 ➞ 「ステップ」 ➞ 「ワークフロー」 ➞ 「イベント」 ➞ 「ジョブ」
〇「イベント」 ➞ 「ワークフロー」 ➞ 「ジョブ」 ➞ 「ステップ」 ➞ 「アクション」
〇「アクション」 ➞ 「ステップ」 ➞ 「ジョブ」 ➞ 「ワークフロー」 ➞ 「イベント」
〇「ワークフロー」 ➞ 「イベント」 ➞ 「ステップ」 ➞ 「ジョブ」 ➞ 「アクション」
回答: 〇「イベント」 ➞ 「ワークフロー」 ➞ 「ジョブ」 ➞ 「ステップ」 ➞ 「アクション」

解説: プルリクエストが開かれると、最初に「イベント」が発生し、その後「ワークフロー」がトリガーされ、続いて「ジョブ」、「ステップ」、「アクション」の順に実行されます。

問題9:
ユーザーの公開GitHubユーザープロフィールに一般的に見られる機能はどれですか？

〇メタデータ、業績、プロフィールのREADME、リポジトリ、ピン留めされたリポジトリ、スター
〇プライベートリポジトリ、プロジェクトボード、コードスニペット
〇コメント履歴、プロジェクトフォーク、ファイルダウンロード
〇ウィキへの貢献、組織メンバーシップ、フォロワー数
回答: 〇メタデータ、業績、プロフィールのREADME、リポジトリ、ピン留めされたリポジトリ、スター

解説: 公開プロフィールには、ユーザーの業績やリポジトリ、ピン留めされたリポジトリ、スターなどの情報が含まれます。

問題10:
Bryanはコンテンツクリエイターで、学生にコードスペースを使用した実践的な経験を提供したいと考えています。彼はどのようにしてコードスペースのリンクをブラウザに直接共有できますか？

〇学生にGitHubリポジトリのメインページに移動して手動でコードスペースを作成するよう指示する
〇コース資料に深いリンクを共有し、クリックするとブラウザで事前に設定されたコードスペースが開く
〇GitHub CLIをインストールし、特定のコマンドを使用してコードスペースの作成を開始するための指示を提供する
〇学生にリポジトリをクローンさせ、各自の好みに基づいてコードスペースを設定させる
回答: 〇コース資料に深いリンクを共有し、クリックするとブラウザで事前に設定されたコードスペースが開く

解説: 深いリンクを使用することで、学生は簡単に事前に設定されたコードスペースにアクセスでき、手間を省くことができます。

問題11:
次のうち、GitHubプロジェクトを最もよく説明するものはどれですか？

〇コードを管理し、問題を追跡し、作業を計画するための共同作業スペース
〇コードの変更を追跡するためのバージョン管理システム
〇個人のウェブサイトをホストするためのプラットフォーム
〇個別のファイルを持つリポジトリ
回答: 〇コードを管理し、問題を追跡し、作業を計画するための共同作業スペース

解説: GitHubプロジェクトは、チームが共同で作業を管理し、問題を追跡し、計画を立てるためのスペースです。

問題12:
GitHubのディスカッションに参加しており、質問に対するコメントが寄せられています。役立つ回答を受け取り、そのコメントを強調表示して訪問者が迅速に答えを見つけられるようにしたいです。どのアクションを取るべきですか？

〇コメントをディスカッションの回答としてマークする
〇問題を作成し、ディスカッションにリンクする
〇ユーザーにディスカッションインサイトを使用して答えを見つけるよう指示する
〇ディスカッションをロックして、ディスカッションの最後の回答として残す
回答: 〇コメントをディスカッションの回答としてマークする

解説: コメントを回答としてマークすることで、他の訪問者がその回答を簡単に見つけることができるようになります。

問題13:
プロジェクトマネージャーとして、GitHubを使用していると、チームのプロジェクトボードに問題やタスクの明確なカテゴリ分けが欠けていることに気付き、組織とコミュニケーションを強化したいと考えています。GitHub Projectsでラベルを活用することで、プロジェクト管理にどのように役立つでしょうか？

〇ラベルは主にチームメンバーの役割に基づいてアクセス権を割り当てるためのもの
〇ラベルはGitHubリポジトリ内でのコード編集にリアルタイムでのコラボレーションを可能にする
〇ラベルは問題を優先順位付けし、カテゴリ分けする方法を提供し、プロジェクトボード上でのタスクの追跡と管理を容易にする
〇ラベルを使用してプロジェクトボードの外観をカスタマイズし、視覚的な魅力を向上させる
回答: 〇ラベルは問題を優先順位付けし、カテゴリ分けする方法を提供し、プロジェクトボード上でのタスクの追跡と管理を容易にする

解説: ラベルを使用することで、問題やタスクを整理し、優先順位を付けることができ、プロジェクト管理が効率的になります。

問題14:
開発者がGitやGitHubで開発のためにブランチを使用する理由は何ですか？

〇メインプロジェクトから独立して一連の変更に取り組むために隔離する
〇プロジェクトファイルの古いバージョンをアーカイブして保存するため
〇リポジトリ全体の複製を作成するため
〇異なる開発者によって行われたコードの貢献を永久に分離するため
回答: 〇メインプロジェクトから独立して一連の変更に取り組むために隔離する

解説: ブランチを使用することで、メインプロジェクトに影響を与えずに独立して作業を行うことができます。

問題15:
GitHubのイシューテンプレートはいつ使用すべきですか？

〇一貫したイシューの作成を効率化し、コラボレーションを強化するため
〇アクセスが制限されたプライベートリポジトリ専用
〇リポジトリを混雑させないために小さなバグ修正のみに使用
〇コードに関連するイシューのみに使用し、ディスカッションや一般的なプロジェクトの質問を除外する
回答: 〇一貫したイシューの作成を効率化し、コラボレーションを強化するため

解説: イシューテンプレートを使用することで、イシューの作成が標準化され、チーム内でのコミュニケーションが向上します。

問題16:
GitHubでプルリクエストをレビューしていると、導入された変更が有望に見えますが、改善が必要な点がいくつかあります。コードレビューのプロセスに効果的に貢献するために、どのアクションを取ることができますか？（3つ選択）

〇コード内で直接特定の変更を要求する
〇全体の承認とマージの準備が整ったことを示す
〇「変更されたファイル」タブで提案された変更に対して特定の行にコメントする
〇マージ前に改善の提案を提供する
回答: 〇コード内で直接特定の変更を要求する、〇全体の承認とマージの準備が整ったことを示す、〇「変更されたファイル」タブで提案された変更に対して特定の行にコメントする

解説: これらのアクションを取ることで、コードレビューの質を向上させ、開発者に具体的なフィードバックを提供できます。

問題17:
プロジェクトのインサイト機能を使用できるのは誰ですか？

〇プロジェクトを表示できるすべての人
〇プロジェクトへの書き込みまたは管理者アクセスを持つユーザー
〇GitHubの無料プランまたはレガシープランを持つユーザー
〇プロジェクトへの管理者アクセスを持つユーザーのみ
回答: 〇プロジェクトを表示できるすべての人

解説: プロジェクトのインサイト機能は、プロジェクトを表示できるすべてのユーザーが利用できます。

問題18:
多くのプロジェクトでオープンソースの貢献者であるKristinaは、プロジェクト間の通知やメンションを追跡するのが難しいと感じています。今日は、彼女がタグ付けされたコメントやメンションに対してレビューし、アクションを取る必要があります。KristinaはどのようにしてGitHubで通知を迅速に整理し、彼女がメンションされたコメントのみを表示できますか？

〇Kristinaは何もしなくても、彼女の受信トレイにはデフォルトでメンションの通知のみが表示される
〇「Dependabot」カスタムフィルターを使用して特定のアラートや通知を見つける
〇彼女のGitHub受信トレイで、「reason:mention」というフィルタークエリを使用してメッセージをフィルタリングする
〇彼女のメールクライアントを使用して、未読メッセージの中で彼女のユーザー名を検索する
回答: 〇彼女のGitHub受信トレイで、「reason:mention」というフィルタークエリを使用してメッセージをフィルタリングする

解説: フィルタークエリを使用することで、Kristinaはメンションされたコメントを迅速に見つけることができます。

問題19:
GitHub Enterprise Cloudの認証オプションのうち、組織リソースへのアクセスを制御し、安全にするために中央集権的なアイデンティティプロバイダー（IdP）を使用するものはどれですか？

〇SAMLシングルサインオン（SSO）とエンタープライズ管理ユーザー
〇GitHubは現在、中央集権的なIdPの使用をサポートしていない
〇2FAを持つGitHub個人アカウント
〇エンタープライズ管理ユーザーを除くSAMLシングルサインオン（SSO）
回答: 〇SAMLシングルサインオン（SSO）とエンタープライズ管理ユーザー

解説: SAML SSOとエンタープライズ管理ユーザーは、中央集権的なアイデンティティプロバイダーを使用してアクセスを制御します。

問題20:
バージョン管理システム（VCS）の主な目的は何ですか？

〇複数の開発者によるファイル内のコーディングエラーや問題を自動的に修正するソリューション
〇ユーザーが開発したソースコードを実行するために設計されたシステム
〇組織がコード品質基準を強制するために使用するアプリ
〇共同作業環境におけるファイルの変更を追跡するために使用されるプログラムまたはサービス
回答: 〇共同作業環境におけるファイルの変更を追跡するために使用されるプログラムまたはサービス

解説: VCSは、ファイルの変更履歴を管理し、複数の開発者が共同で作業できるようにするためのシステムです。

問題21:
新しいチームメンバーが、あなたの組織内の株取引アプリケーションの新しいリリースのコードベースを管理する手助けをすることになりました。あなたは、どのようにしてその同僚に適切なアクセスを提供するか不明です。最良のアプローチは何ですか？

〇同僚にGitHubサポートに連絡してアクセスを求めるよう指示する
〇新しいチームメンバーを直接GitHubリポジトリに追加する
〇組織のオーナーに連絡して、どのチームがリポジトリにアクセスできるかを確認し、そのオーナーまたはチームメンテイナーに同僚を適切なチームに追加してもらう
〇組織のモデレーターに連絡して、どのチームがリポジトリにアクセスできるかを確認し、そのチームに同僚を追加してもらう
回答: 〇組織のオーナーに連絡して、どのチームがリポジトリにアクセスできるかを確認し、そのオーナーまたはチームメンテイナーに同僚を適切なチームに追加してもらう

解説: 組織のオーナーに確認することで、適切なアクセス権を持つチームに同僚を追加することができます。

問題22:
テンプレートリポジトリに含めることができるファイルやコンテンツの種類は何ですか？

〇ファイルはテンプレートリポジトリに含めることができない
〇プロジェクトに関連する任意のファイルやコンテンツ
〇READMEファイルのみ
〇ソースコードファイルのみ
回答: 〇プロジェクトに関連する任意のファイルやコンテンツ

解説: テンプレートリポジトリには、プロジェクトに関連する任意のファイルやコンテンツを含めることができます。

問題23:
GitHubプロジェクトのロードマップレイアウトを最もよく説明するものはどれですか？

〇問題、プルリクエスト、ドラフト問題を含むカスタマイズ可能な列を持つレイアウト
〇問題、プルリクエスト、ドラフト問題をタイムライン上で追跡するための設定可能な期間
〇問題、プルリクエスト、ドラフト問題を含む強力で適応可能なスプレッドシート
〇問題、プルリクエスト、ドラフト問題を階層的なツリー構造に整理するレイアウト
回答: 〇問題、プルリクエスト、ドラフト問題を含むカスタマイズ可能な列を持つレイアウト

解説: ロードマップレイアウトは、プロジェクトの進行状況を視覚化し、タスクを整理するためのカスタマイズ可能な列を提供します。

問題24:
JackはリポジトリでGitHub Actionsを無効にしたいと考えています。これを行った結果は何ですか？

〇リポジトリでワークフローは実行されない
〇リポジトリでGitHub Actionsを無効にすることはできない
〇アクションと再利用可能なワークフローが制限される
〇ワークフローはプルリクエストを作成できるが、承認することはできない
回答: 〇リポジトリでワークフローは実行されない

解説: GitHub Actionsを無効にすると、そのリポジトリ内でのすべてのワークフローが実行されなくなります。

問題25:
Danは、Sarahが貢献した興味深いコードリポジトリを見つけ、プロジェクトの時間を節約するのに役立つと考えています。その結果、DanはGitHubでSarahをフォローしました。DanがGitHubユーザーをフォローすることで得られる利点は何ですか？

〇GitHub Communityを通じてSarahに直接メッセージを送ることができる
〇Danが新しいフォロワーであることをSarahに自動的に通知するメールが送信される
〇Sarahのダッシュボードに彼がフォローしている人として表示される
〇DanはSarahの更新や活動を自分の個人ダッシュボードで見ることができる
回答: 〇DanはSarahの更新や活動を自分の個人ダッシュボードで見ることができる

解説: GitHubでユーザーをフォローすると、そのユーザーの活動や更新情報を自分のダッシュボードで確認できるようになります。

問題26:
ProjectsとProjects Classicのユーザーインターフェースのカスタマイズオプションの違いは何ですか？

〇ProjectsはProjects Classicに比べてカスタマイズ可能なインターフェースが少ない
〇ProjectsとProjects Classicは同じユーザーインターフェースを共有している
〇Projectsは固定されたカスタマイズ不可能なユーザーインターフェースを持っている
〇Projectsはプロジェクトボードやワークフローのカスタマイズにおいてより柔軟性を提供する
回答: 〇Projectsはプロジェクトボードやワークフローのカスタマイズにおいてより柔軟性を提供する

解説: Projectsは、ユーザーがプロジェクトボードやワークフローをより柔軟にカスタマイズできるように設計されています。

問題27:
GitHub Copilotは、新しいコードを開発する際に関連する提案を提供するために何を分析しますか？

〇現在のファイルと関連ファイルのコンテキストを分析する
〇現在のファイル内のコンテキストのみを分析する
〇現在のコード行内のコンテキストのみを分析する
〇リポジトリ内のすべてのファイルのコンテキストを分析する
回答: 〇現在のファイルと関連ファイルのコンテキストを分析する

解説: GitHub Copilotは、現在のファイルとその関連ファイルのコンテキストを分析して、適切なコード提案を行います。

問題28:
GitHubプロジェクト管理におけるプロジェクトビューの目的は何ですか？

〇プロジェクトビューはプロジェクトのREADMEファイルの外観をカスタマイズするのに役立つ
〇プロジェクトビューはGitHubリポジトリ内でのコード編集にリアルタイムでのコラボレーションを可能にする
〇プロジェクトビューはGitHubプロジェクト内のチームメンバーのアクセス権を設定するために使用される
〇プロジェクトビューは、異なるボードにわたってプロジェクトのタスクや問題を視覚化し、整理することを可能にし、プロジェクトの進捗に関する複数の視点を提供する
回答: 〇プロジェクトビューは、異なるボードにわたってプロジェクトのタスクや問題を視覚化し、整理することを可能にし、プロジェクトの進捗に関する複数の視点を提供する

解説: プロジェクトビューを使用することで、タスクや問題を整理し、プロジェクトの進捗を視覚化することができます。

問題29:
GitHub UIでプルリクエストの提案された変更をレビューしているとき、プルリクエストを評価し、承認するかどうかを決定するために利用できるオプションは何ですか？（5つ選択）

〇「会話」タブでプルリクエストに関連するディスカッションを表示する
〇「チェック」タブでプルリクエストが必要なチェックに合格していることを確認する
〇「変更されたファイル」タブで提案された変更に対してインラインコメントを提供する
〇「コミット」タブを使用してプルリクエストに含まれるコミットをレビューする
〇「セキュリティ」タブで提案された変更がプルリクエストにリンクされた関連問題を修正していることを確認する
〇「変更されたファイル」タブでベースブランチと比較ブランチのファイルの違いを比較する
回答: 〇「会話」タブでプルリクエストに関連するディスカッションを表示する、〇「チェック」タブでプルリクエストが必要なチェックに合格していることを確認する、〇「変更されたファイル」タブで提案された変更に対してインラインコメントを提供する、〇「コミット」タブを使用してプルリクエストに含まれるコミットをレビューする、〇「変更されたファイル」タブでベースブランチと比較ブランチのファイルの違いを比較する

解説: これらのオプションを使用することで、プルリクエストの内容を詳細に評価し、承認または修正を提案することができます。

問題30:
GitHubリポジトリで作業する際、リポジトリをローカルマシンにクローンする目的は何ですか？

〇クローンすることで、個人用に完全に独立した新しいリポジトリを作成し、元のプロジェクトから隔離することができる
〇クローンはリポジトリのバックアップコピーを作成するためだけに必要で、共同作業開発を直接サポートしない
〇クローンすることで、GitHub.comからリポジトリ全体をローカルマシンまたはコードスペースにコピーすることができる
〇クローンすることで、最新の変更とメインブランチのみをGitHub.comから取得し、全体のリポジトリをダウンロードせずに迅速な更新を行うことができる
回答: 〇クローンすることで、GitHub.comからリポジトリ全体をローカルマシンまたはコードスペースにコピーすることができる

解説: リポジトリをクローンすることで、リモートリポジトリの完全なコピーをローカルに持ち、オフラインで作業することが可能になります。

問題31:
GitHubリポジトリを分類するために含めると役立つトピックは何ですか？（3つ選択）

〇主題領域
〇ライセンス
〇言語
〇リポジトリの意図された目的
回答: 〇主題領域、〇ライセンス、〇言語

解説: これらのトピックを含めることで、リポジトリの内容や目的を明確にし、他のユーザーがリポジトリを見つけやすくなります。

問題32:
GitHubでリポジトリをフォークするとはどういうことですか？

〇個人用にリポジトリのプライベートコピーを作成すること
〇実験的な変更のための並行ブランチを作成すること
〇オフライン開発のためにリポジトリをクローンすること
〇リポジトリのコードレビューを開始すること
回答: 〇個人用にリポジトリのプライベートコピーを作成すること

解説: フォークすることで、他のユーザーのリポジトリの独立したコピーを作成し、自分の変更を加えることができます。

問題33:
GitHub Actionsでワークフローに使用されるアクションを定義できる場所はどこですか？（3つ選択）

〇アクションはプライベートリポジトリでのみ定義できる
〇Docker Hubの公開Dockerコンテナイメージ
〇ワークフローファイルと同じリポジトリ
〇任意の公開リポジトリ
回答: 〇Docker Hubの公開Dockerコンテナイメージ、〇ワークフローファイルと同じリポジトリ、〇任意の公開リポジトリ

解説: GitHub Actionsでは、アクションをさまざまな場所で定義でき、特に公開リポジトリやDocker Hubから利用することができます。

問題34:
複数の問題があるプロジェクトで作業しており、新しいブランチをすぐに作成して貢献を開始したいと考えています。問題に関連する新しいブランチを迅速に作成するにはどうすればよいですか？

〇「フォーク」ボタンを使用して新しいリポジトリと関連するブランチを作成する
〇「クローンまたはダウンロード」ボタンをクリックして手動でローカルにブランチを作成する
〇リポジトリ全体をクローンし、「git checkout -b」コマンドを使用してローカル環境で新しいブランチを作成する
〇問題ページの「ブランチを作成」オプションを使用して、問題に関連するブランチを迅速に作成する
回答: 〇問題ページの「ブランチを作成」オプションを使用して、問題に関連するブランチを迅速に作成する

解説: 問題ページから直接ブランチを作成することで、迅速に作業を開始できます。

問題35:
プライベートリポジトリでコードをコミットしたが、レビューとコラボレーションのために同僚と共有したいと考えています。この状況を考慮して、同僚に直接リポジトリへのアクセスを与えずにコードを簡単に共有するにはどうすればよいですか？

〇コードのためにGitHub Gistを作成し、GistのURLを同僚と共有する
〇プライベートリポジトリをフォークし、フォークしたリポジトリを同僚と共有する
〇同僚をプライベートリポジトリのコラボレーターとして追加する
〇リポジトリのクローンURLを共有し、必要な資格情報を同僚に提供する
回答: 〇コードのためにGitHub Gistを作成し、GistのURLを同僚と共有する

解説: GitHub Gistを使用することで、特定のコードスニペットを簡単に共有でき、同僚に直接リポジトリへのアクセスを与えることなくレビューを受けることができます。

問題36:
プロジェクトの問題を見て貢献したいと考えていますが、誰かがその問題に取り組んでいるかどうか不明です。チームが他のメンバーに誰が問題に取り組んでいるかをより良く知らせるために使用できるGitHubの機能は何ですか？

〇プルリクエストやブランチを問題にリンクして、修正が進行中であることを示す
〇コラボレーターにメッセージを送信し、どの問題に取り組んでいるかを尋ねる
〇問題を閉じて、他のチームメンバーがそれに取り組んでいることを知らせるのを待つ
〇リポジトリに関連する問題やプルリクエストをフィルタリング、ソート、検索する
回答: 〇プルリクエストやブランチを問題にリンクして、修正が進行中であることを示す

解説: プルリクエストやブランチを問題にリンクすることで、他のメンバーに進行中の作業を明示的に示すことができます。

問題37:
GitHubでイシューやプルリクエストを割り当てる主な目的は何ですか？

〇イシューやプルリクエストが最初に割り当てられた週次チームミーティングを排除するため
〇特定のタスクに対して誰が責任を持っているかを示し、作業を整理し追跡するため
〇コミュニケーションのためにコメントを使用しないようにするため
〇チームメンバー間のコラボレーションを制限するため
回答: 〇特定のタスクに対して誰が責任を持っているかを示し、作業を整理し追跡するため

解説: イシューやプルリクエストを割り当てることで、誰がどのタスクに責任を持っているかを明確にし、作業の進捗を管理しやすくなります。

問題38:
GitとGitHubの違いを最もよく説明するものはどれですか？

〇Gitは開発者が小規模または個人プロジェクトに使用する 　GitHubは組織が大規模プロジェクトを管理し制御するために使用する
〇Gitはファイルを管理しバージョン管理するためのコマンドラインベースのツール 　GitHubはファイルを保存し管理するための強力なUIを持つウェブベースのツール
〇Gitは分散型バージョン管理システム 　GitHubはGitをコア技術として使用するクラウドプラットフォーム
〇Gitは集中型バージョン管理システム 　GitHubは分散型バージョン管理システム
回答: 〇Gitは分散型バージョン管理システム 　GitHubはGitをコア技術として使用するクラウドプラットフォーム

解説: Gitは分散型バージョン管理システムであり、GitHubはその上に構築されたクラウドプラットフォームです。

問題39:
Jeffは特定のディレクトリ構造、ブランチ、ファイルを持つ類似のプロジェクトを頻繁に作成しています。彼はこのプロセスを効率化したいと考えています。このシナリオに最も適した機能は何ですか？

〇GitHub Gist
〇GitHubリポジトリテンプレート
〇GitHub Action
〇GitHub Issue
回答: 〇GitHubリポジトリテンプレート

解説: リポジトリテンプレートを使用することで、特定の構造や設定を持つ新しいリポジトリを迅速に作成できます。

問題40:
各新しいリポジトリにはデフォルトのラベルがありますが、組織はどのようにして問題、プルリクエスト、ディスカッションをさらにカテゴリ分けできますか？

〇プロジェクト内にカスタムラベルを作成する
〇カスタムラベルをインポートするために外部ソースを使用することはできない
〇ユーザーは何もできず、デフォルトのラベルを使用することに制限されている
〇デフォルトのラベルの名前を変更することはできるが、プロジェクトが持つラベルの数には制限がある
回答: 〇プロジェクト内にカスタムラベルを作成する

解説: 組織は独自のニーズに応じてカスタムラベルを作成し、問題やプルリクエストをより効果的に管理できます。

問題41:
GitHubリポジトリのインサイトは、コミュニティのエンゲージメントを評価し、重要な指標を追跡し、有用なデータを引き出すのにどのように役立ちますか？

〇リポジトリインサイトは秘密とコードスキャンの警告を強調表示する
〇リポジトリインサイトは貢献者のメールアドレスを提供する
〇リポジトリインサイトはすべてのオープンタスクと問題を追跡することを可能にする
〇リポジトリインサイトはプロジェクトの活動と貢献者のエンゲージメントをグラフ化する
回答: 〇リポジトリインサイトはプロジェクトの活動と貢献者のエンゲージメントをグラフ化する

解説: リポジトリインサイトを使用することで、プロジェクトの進捗や貢献者の活動を視覚化し、コミュニティのエンゲージメントを評価できます。

問題42:
Amirは複雑なコーディングプロジェクトに取り組んでおり、最近GitHub Copilotを使用してコード提案を支援しています。GitHub CopilotはAmirのコーディング体験とワークフローをどのように向上させることができますか？

〇GitHub CopilotはAmirのチームメンバーとのリアルタイムコラボレーションを可能にし、同時にコード編集を促進する
〇GitHub CopilotはAmirの入力に基づいてコードファイル全体を自動的に生成し、完成させることができる
〇GitHub CopilotはAmirのプロジェクトタスクを管理し整理するために特化して設計されている
〇GitHub Copilotはコードレビューを提供し、Amirの既存のコードベースの改善を提案する
回答: 〇GitHub CopilotはAmirの入力に基づいてコードファイル全体を自動的に生成し、完成させることができる

解説: GitHub Copilotは、リアルタイムでコード提案を行い、開発者の作業を効率化します。

問題43:
GitHubプロジェクトマネージャーとして、プロジェクト内のアイテムの最大数に達し、プロジェクトのコンテンツを管理する方法を探しています。完了または未計画として閉じられたアイテムをアーカイブするには、どのGitHub機能を使用できますか？

〇アイテムのステータスが「完了」または「未計画」でないように問題を再オープンする
〇フィルターを使用してプロジェクトビュー内のアイテムのみを表示し、最大数を下回るようにする
〇影響を受ける問題やプルリクエストのマイルストーンを後の日付に変更する
〇プロジェクトの組み込みワークフローを設定して、完了したアイテムを自動的にアーカイブする
回答: 〇プロジェクトの組み込みワークフローを設定して、完了したアイテムを自動的にアーカイブする

解説: 組み込みワークフローを使用することで、プロジェクトのアイテムを効率的に管理し、最大数を超えないようにすることができます。

問題44:
ThomasはGitHub UIで新しいリポジトリを作成し、新しいファイルを追加する必要があります。これを達成する正しい方法は何ですか？

〇ローカルリポジトリにファイルを追加した後、「git push」コマンドを使用する
〇ファイルをローカルマシンにダウンロードし、リポジトリフォルダーにコピーする
〇新しいファイルごとに新しいブランチを作成し、GitHubウェブインターフェースで手動でファイルを追加する
〇リポジトリのGitHubページで「ファイルを追加」ボタンをクリックして、新しいファイルを作成するか、既存のファイルをアップロードする
回答: 〇リポジトリのGitHubページで「ファイルを追加」ボタンをクリックして、新しいファイルを作成するか、既存のファイルをアップロードする

解説: GitHubのウェブインターフェースを使用して、簡単に新しいファイルを作成またはアップロードできます。

問題45:
GitHub DesktopとGitHub.comの主な違いは何ですか？

〇GitHub DesktopはGitHubサービスでのオンラインコード編集専用 　GitHub.comはオンラインとオフラインの両方の開発に焦点を当てている
〇GitHub Desktopはバージョン管理システム 　GitHub.comはGitのグラフィカルユーザーインターフェース
〇GitHub DesktopはGitのコマンドラインインターフェース 　GitHub.comはリポジトリをホストするためのウェブベースのプラットフォーム
〇GitHub DesktopはGitHubまたは他のGitホスティングサービスでホストされているファイルを操作するための無料のオープンソースアプリケーション 　GitHub.comはホスティング、コラボレーション、プロジェクト管理のためのウェブベースのプラットフォーム
回答: 〇GitHub DesktopはGitHubまたは他のGitホスティングサービスでホストされているファイルを操作するための無料のオープンソースアプリケーション 　GitHub.comはホスティング、コラボレーション、プロジェクト管理のためのウェブベースのプラットフォーム

解説: GitHub Desktopはローカルでの作業を支援するアプリケーションであり、GitHub.comはオンラインでのリポジトリ管理を提供します。

問題46:
組織のオーナーは、組織内のすべての次の人に二要素認証を要求できます。

〇リポジトリの閲覧者
〇請求マネージャー
〇外部コラボレーター
〇組織メンバー
回答: 〇組織メンバー

解説: 組織のオーナーは、組織メンバーに対して二要素認証を要求することができます。

問題47:
GitHubはコードスペースをカスタマイズするためのいくつかの方法を提供しています。何をカスタマイズできますか？（4つ選択）

〇コードスペースが起動されるAzureアカウントを選択して、アプリケーションのセキュリティを確保する
〇コードスペースを実行するマシンタイプを選択して、適切なリソースを確保する
〇コードスペースが作成されるデフォルトのリージョンを変更して、データの保存場所をパーソナライズする
〇複数のコードスペースを区別するためにコードスペースの表示名を変更する
〇作業するためにmacOSまたはWindowsのいずれかにオペレーティングシステムを変更する
〇コードスペース内のシェルを変更して、慣れ親しんだセットアップを維持する
回答: 〇コードスペースが起動されるAzureアカウントを選択して、アプリケーションのセキュリティを確保する、〇コードスペースを実行するマシンタイプを選択して、適切なリソースを確保する、〇コードスペースが作成されるデフォルトのリージョンを変更して、データの保存場所をパーソナライズする、〇複数のコードスペースを区別するためにコードスペースの表示名を変更する

解説: これらのカスタマイズオプションを使用することで、コードスペースの設定を自分のニーズに合わせて調整できます。

問題48:
GitHubリポジトリにREADMEファイルを追加する主な利点は何ですか？（3つ選択）

〇プロジェクトが何をするのか、なぜ読者にとって有用であるかを文書化する
〇ユーザーがプロジェクトに関してどこで助けを得られるかを伝える
〇コラボレーターのためのコードレビューを効率化する
〇プロジェクトを維持し、貢献する人を伝える
回答: 〇プロジェクトが何をするのか、なぜ読者にとって有用であるかを文書化する、〇ユーザーがプロジェクトに関してどこで助けを得られるかを伝える、〇プロジェクトを維持し、貢献する人を伝える

解説: READMEファイルは、プロジェクトの目的や使用方法を明確にし、他のユーザーがプロジェクトを理解しやすくするために重要です。

問題49:
オープンソースソフトウェアの主な特徴は何ですか？

〇閉じた専有コード
〇単一の会社によって開発される
〇無料でアクセス可能なソースコード
〇商業利用専用
回答: 〇無料でアクセス可能なソースコード

解説: オープンソースソフトウェアは、誰でもアクセスでき、使用、変更、配布が可能なソースコードを提供します。

問題50:
開発者として、GitHubプロジェクトをプログラムで管理したいが、GitHubユーザーインターフェースにログインしたくありません。これを行うためのオプションは何ですか？（2つ選択）

〇GitHub CLIを使用してイシューやプルリクエストを作成および管理する
〇既存のイシューを管理するためにGitをダウンロードしてインストールする
〇GitHub Wiki機能を使用してGitHubプロジェクトをプログラムで管理する
〇GraphQL APIを使用してプロジェクトを管理する
回答: 〇GitHub CLIを使用してイシューやプルリクエストを作成および管理する、〇GraphQL APIを使用してプロジェクトを管理する

解説: GitHub CLIやGraphQL APIを使用することで、GitHubの機能をプログラムで管理できます。

問題51:
あなたと同僚は、重要なプロジェクトの問題を解決するために協力しています。コメントや変更についてのメール通知を受け取り、迅速に対処したいと考えています。これを実現するにはどうすればよいですか？

〇GitHubでその問題を購読して、最新のコメントについて通知を受け取る
〇リポジトリをスターして、リポジトリ内の変更に関する通知を有効にする
〇マージリクエストを提出し、それを問題にリンクする
〇リポジトリ全体のメール通知を有効にして、すべての更新について通知を受け取る
回答: 〇GitHubでその問題を購読して、最新のコメントについて通知を受け取る

解説: 問題を購読することで、その問題に関連するすべてのコメントや変更について通知を受け取ることができます。

問題52:
Isabellaはプルリクエストのために新しいブランチを作成したいが、リポジトリへの書き込み権限がありません。彼女はメインブランチに変更を提案するために新しいブランチをどのように作成できますか？

〇友人に彼女のためにブランチを作成するよう頼む
〇コマンドラインではなくGitHub UIを使用してブランチを作成する
〇リポジトリをローカルマシンにクローンし、その後ブランチを作成する
〇まずリポジトリをフォークする
回答: 〇まずリポジトリをフォークする

解説: フォークすることで、独自のコピーを作成し、そのコピーで新しいブランチを作成することができます。

問題53:
GitHub Actionsでワークフローを定義するために使用されるファイルの種類は何ですか？

〇JSONファイル
〇CSVファイル
〇Markdownファイル
〇YAMLファイル
回答: 〇YAMLファイル

解説: GitHub ActionsのワークフローはYAMLファイルで定義されます。

問題54:
GitHub Enterpriseのリポジトリの可視性オプションは何ですか？

〇プライベート、パブリック、セキュア
〇個人、パブリック、内部
〇プライベート、パブリック、内部
〇個人、パブリック、セキュア
回答: 〇プライベート、パブリック、内部

解説: GitHub Enterpriseでは、リポジトリの可視性をプライベート、パブリック、内部のいずれかに設定できます。

問題55:
バージョン管理システム（VCS）の別名は何ですか？

〇ソースコード管理（SCM）システム
〇プロジェクトライフサイクル管理（PLM）システム
〇コードコラボレーションツール（CCT）
〇リビジョン管理システム（RCS）
回答: 〇ソースコード管理（SCM）システム

解説: VCSはソースコード管理システムとしても知られ、ファイルの変更履歴を管理します。

問題56:
GitHub Foundations試験に合格したKyleは、GitHubの今後の機能について興味を持ち、公式リリース前に新しい機能を探索したいと考えています。これらの機能にアクセスしてテストするために使用すべき機能は何ですか？

〇GitHub機能プレビュー
〇GitHubスポンサー
〇GitHubディスカッション
〇GitHub Actions
回答: 〇GitHub機能プレビュー

解説: GitHub機能プレビューを使用することで、リリース前の新機能を試すことができます。

問題57:
GitHub個人アカウントリポジトリの権限レベルは何ですか？

〇リポジトリのオーナーとコラボレーター
〇リポジトリのオーナーとモデレーター
〇リポジトリのオーナー、コラボレーター、ビューア
〇リポジトリのオーナー、コラボレーター、チームメンテイナー
回答: 〇リポジトリのオーナーとコラボレーター

解説: GitHubの個人アカウントリポジトリでは、オーナーとコラボレーターが権限を持ちます。

問題58:
プライベートリポジトリでのみGitHub Advanced Securityで利用可能なセキュリティ機能は何ですか？

〇Dependabotアラート
〇セキュリティポリシー
〇セキュリティアドバイザリー
〇コードスキャン
回答: 〇コードスキャン

解説: コードスキャンは、プライベートリポジトリにおいてセキュリティの脆弱性を検出するための機能です。

問題59:
Steveの組織は最近二要素認証の使用を要求し、この変更を彼に通知しました。Steveが2FAを有効にしないことを選択した場合、彼のGitHubアカウントに何が起こりますか？

〇アカウントは停止される
〇アカウントは指定された猶予期間内に組織へのアクセスを維持する
〇アカウントは組織から削除される
〇アカウントは削除される
回答: 〇アカウントは組織から削除される

解説: 2FAを有効にしない場合、アカウントは組織から削除される可能性があります。

問題60:
GitHubコードスペースで作業する際、どのようなタイプのマシンで作業していますか？

〇GitHubによって管理される仮想マシン上で実行される開発コンテナ
〇自分のMicrosoft Azureアカウントで実行される仮想マシン
〇自分のローカルハードウェア上で実行される仮想マシン
〇GitHub Desktopで実行されるローカルマシン
回答: 〇GitHubによって管理される仮想マシン上で実行される開発コンテナ
