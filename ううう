問題1:
GitHubコードスペースの作成を開始するにはどうすればよいですか？

〇リポジトリをローカルマシンにクローンする
〇「コード」ボタンをクリックして「ZIPをダウンロード」を選択する
〇「コード」ボタンを使用して「Codespacesで開く」を選択する
〇リポジトリにプルリクエストを開く
回答: 〇「コード」ボタンを使用して「Codespacesで開く」を選択する

解説: GitHubコードスペースを作成するには、リポジトリの「コード」ボタンをクリックし、「Codespacesで開く」を選択することで新しいコードスペースを開始できます。

問題2:
GitHubでリポジトリをフォークするとき、フォークが作成された元のリポジトリを何と呼びますか？

〇フォークされたリポジトリ
〇アップストリームリポジトリ
〇親リポジトリ
〇ソースリポジトリ
回答: 〇アップストリームリポジトリ

解説: フォークされたリポジトリの元となるリポジトリは「アップストリームリポジトリ」と呼ばれます。

問題3:
RameshはGitHubコードスペースで複雑なソフトウェアプロジェクトに取り組んでおり、現在のマシンタイプが開発タスクに必要なパフォーマンスを提供していないことに気付きました。Rameshはコードスペースを再構成して要件を満たすためにどのような手順を踏むべきですか？

〇リポジトリをクローンし、希望のマシンタイプで新しいコードスペースをゼロから作成する
〇GitHubにサポートチケットを開いて、コードスペースのマシンタイプ変更をリクエストする
〇GitHubコードスペースの設定を使用して、パフォーマンス要件に応じてマシンタイプを変更する
〇ローカル開発マシンにより強力なマシンタイプを手動でインストールする
回答: 〇GitHubコードスペースの設定を使用して、パフォーマンス要件に応じてマシンタイプを変更する

解説: GitHubコードスペースの設定を使用することで、必要なパフォーマンスに応じてマシンタイプを変更できます。

問題4:
次のうち、GitHub Mobileで利用できない機能はどれですか？

〇通知を管理、トリアージ、クリアする
〇プルリクエストでのウェブベースのコード編集
〇問題やプルリクエストを読み、レビューし、コラボレーションする
〇自動テストと継続的インテグレーション
回答: 〇プルリクエストでのウェブベースのコード編集

解説: GitHub Mobileでは、プルリクエストでのウェブベースのコード編集機能は利用できません。

問題5:
Philは組織のオーナーで、プライベートリポジトリへのアクセスを異なるレベルで提供しています。Philは誰にアクセスを提供できますか？

〇Philは職務分離のため、組織オーナーとしてアクセスを提供できない
〇Philは組織メンバー、外部コラボレーター、チームに対して適切なアクセスレベルのために役割と権限を利用してアクセスを提供できる
〇PhilはGitHubアカウントを持っているかどうかに関係なく、組織メンバーと外部コラボレーターにアクセスを提供できる
〇Philは組織メンバーとチームにアクセスを提供できるが、外部コラボレーターには提供できない
回答: 〇Philは組織メンバー、外部コラボレーター、チームに対して適切なアクセスレベルのために役割と権限を利用してアクセスを提供できる

解説: Philは、組織のオーナーとして、組織メンバーや外部コラボレーターに対してアクセスを提供することができます。

問題6:
ブランチ保護の目的は何ですか？

〇ブランチに許可されるコミットの数を制限するため
〇ブランチへの偶発的または不正な変更を防ぐため
〇リポジトリの貢献者に対して二要素認証を強制するため
〇疑わしいコードを含むブランチを自動的に隔離するため
回答: 〇ブランチへの偶発的または不正な変更を防ぐため

解説: ブランチ保護は、特定のブランチに対する変更を制限し、意図しない変更を防ぐために使用されます。

問題7:
ワークフローを実行する原因となるイベントはどれですか？（3つ選択）

〇リポジトリの設定を変更する
〇イシューを開く
〇プッシュコミット
〇プルリクエスト
回答: 〇イシューを開く、〇プッシュコミット、〇プルリクエスト

解説: イシューを開く、プッシュコミット、プルリクエストは、GitHub Actionsのワークフローをトリガーするイベントです。

問題8:
他のユーザーが作成した便利なコードスニペットを含むGitHub Gistを見つけましたが、自分の使用のために修正したいと考えています。適切なアクションは何ですか？

〇GistのURLを他の人と共有して修正に協力する
〇Gistをフォークするか、Gistをローカルマシンにクローンして必要な修正を行う
〇新しいプルリクエストを作成し、オーナーに変更を承認してマージするよう依頼する
〇Gistファイルを個別にダウンロードし、それらを自分のGistにアップロードする
回答: 〇Gistをフォークするか、Gistをローカルマシンにクローンして必要な修正を行う

解説: Gistをフォークすることで、自分の変更を加えた独自のコピーを作成できます。

問題9:
リポジトリを適切に維持するために推奨されるベストプラクティスと機能は何ですか？（3つ選択）

〇READMEファイルを作成してプロジェクトを文書化する
〇コミット履歴を削除してスペースを減らす
〇フォークよりもブランチを優先する
〇必要に応じてGit Large File Storageを有効にする
回答: 〇READMEファイルを作成してプロジェクトを文書化する、〇フォークよりもブランチを優先する、〇必要に応じてGit Large File Storageを有効にする

解説: READMEファイルを作成することでプロジェクトの情報を提供し、ブランチを使用することで作業を整理し、Git Large File Storageを使用することで大きなファイルを効率的に管理できます。

問題10:
GitHubでイシューやプルリクエストにユーザーを割り当てることに関して正しい文はどれですか？（3つ選択）

〇リポジトリへの書き込みアクセスを持つ誰でもイシューやプルリクエストを割り当てることができる
〇アサインは特定のイシューやプルリクエストに誰が取り組んでいるかを明確にする
〇イシューやプルリクエストに無制限の数のアサインを割り当てることができる
〇各イシューやプルリクエストに複数の人を割り当てることができる
回答: 〇リポジトリへの書き込みアクセスを持つ誰でもイシューやプルリクエストを割り当てることができる、〇アサインは特定のイシューやプルリクエストに誰が取り組んでいるかを明確にする、〇各イシューやプルリクエストに複数の人を割り当てることができる

解説: GitHubでは、書き込みアクセスを持つユーザーがイシューやプルリクエストにアサインを行うことができ、複数のアサインを設定することも可能です。

問題11:
GitHub UIから新しいリポジトリを作成し、空のREADMEファイルを含めました。しかし、プロジェクトに関する文書を含めるために既存のREADMEでリポジトリを作成する必要があります。新しいリポジトリを作成するたびに時間を節約し、作業を繰り返さないための最良のアプローチは何ですか？

〇既存のプロジェクトをフォークして不要なファイルを削除して新しいリポジトリを作成する
〇新しいリポジトリごとに新しいブランチを作成し、READMEファイルを更新して変更をメインブランチにマージする
〇将来のプロジェクトのために必要なファイルと構造を含むリポジトリテンプレートから新しいリポジトリを作成する
〇リポジトリをローカルマシンにクローンし、ファイルを更新して更新された内容をGitHubにプッシュする
回答: 〇将来のプロジェクトのために必要なファイルと構造を含むリポジトリテンプレートから新しいリポジトリを作成する

解説: リポジトリテンプレートを使用することで、必要なファイルと構造を持つ新しいリポジトリを迅速に作成できます。

問題12:
Claireは、彼女の組織が所有するリポジトリの最近の活動を把握したいと考えています。彼女がアクセスすべき組織機能は何ですか？

GitHub組織ニュースフィード
GitHubリポジトリインサイト
GitHubイシュー
GitHub通知
回答: 〇GitHub通知

解説: GitHub通知を使用することで、組織が所有するリポジトリの最近の活動を追跡できます。

問題13:
共同プロジェクトでマイルストーンを使用する主な利点は何ですか？

〇マイルストーンは、すべてのコラボレーターが同じ方法でコードを開発することを保証するためにコーディング基準を強制する
〇マイルストーンは、完了したイシューを解決した後に自動的に閉じる
〇マイルストーンは、イシューやプルリクエストの進捗を追跡するための視覚的なロードマップを提供する
〇マイルストーンは、イシューを解決するためのリアルタイムのコードコラボレーションを可能にする
回答: 〇マイルストーンは、イシューやプルリクエストの進捗を追跡するための視覚的なロードマップを提供する

解説: マイルストーンを使用することで、プロジェクトの進捗を視覚的に把握しやすくなります。

問題14:
イシューテンプレートとイシューフォームの違いは何ですか？

〇イシューテンプレートはMarkdownで構築されているが、イシューフォームはHTMLの知識が必要で、GitHubにイシューを提出するユーザーからデータを取得するための異なるコンポーネントを構築する
〇イシューテンプレートはGitHub UIを通じて提出されるが、イシューフォームはマージリクエストを通じてリポジトリに直接コミットされる
〇イシューテンプレートは、貢献者が削除して自分の入力に置き換えることができるテキストを提供するが、フォームは必須フィールドと重要な詳細を見逃さないための簡単な手順を持つ構造化されたフォームを構築することを可能にする
〇イシューテンプレートはデフォルトでGitHubによって提供されるが、イシューフォームはGitHub Marketplaceにあり、ユーザーから提出されたイシューを迅速に解決するのに役立つ
回答: 〇イシューテンプレートは、貢献者が削除して自分の入力に置き換えることができるテキストを提供するが、フォームは必須フィールドと重要な詳細を見逃さないための簡単な手順を持つ構造化されたフォームを構築することを可能にする

解説: イシューテンプレートは基本的なテキストを提供するのに対し、イシューフォームは構造化された情報を収集するためのものです。

問題15:
GitHub Projectsを使用する際に作成できるプロジェクトの種類は何ですか？（2つ選択）

マイルストーンプロジェクト
ユーザープロジェクト
チームプロジェクト
組織プロジェクト
回答: 〇チームプロジェクト、〇組織プロジェクト

解説: GitHub Projectsでは、チームプロジェクトと組織プロジェクトを作成することができます。

問題16:
GitHubリポジトリにプルリクエストテンプレートを追加する有効な方法は何ですか？

〇リポジトリのpull_requestディレクトリに配置し、プルリクエストテンプレートをpull_request_template.mdと名付ける
〇リポジトリのルートディレクトリにプルリクエストテンプレートを作成し、名前をpull_request_template.mdとする
〇リポジトリのルートディレクトリにプルリクエストテンプレートを作成し、名前をtemplate_pull_request.mdとする
〇隠しディレクトリにファイルを保存し、プルリクエストテンプレートを.pull_request/pull_request_template.mdと名付ける
回答: 〇リポジトリのルートディレクトリにプルリクエストテンプレートを作成し、名前をpull_request_template.mdとする

解説: プルリクエストテンプレートは、リポジトリのルートディレクトリに配置することで有効になります。

問題17:
GitHub Copilotの提案の質がどのように影響を受けるかを正確に反映している文はどれですか？

〇GitHub Copilotは、公開リポジトリでの表現に関係なく、すべてのプログラミング言語に対して同様に強力な提案を提供する
〇GitHub Copilotの提案の質は、各プログラミング言語のトレーニングデータの量と多様性によって影響を受けない
〇公開リポジトリでの表現が少ないプログラミング言語は、GitHub Copilotでの提案が少ないか、あまり強力でない可能性がある
〇GitHub Copilotは、いくつかの人気のある言語に主に焦点を当てており、あまり一般的でない言語の提案はサポートしていない
回答: 〇公開リポジトリでの表現が少ないプログラミング言語は、GitHub Copilotでの提案が少ないか、あまり強力でない可能性がある

解説: プログラミング言語の表現が少ないと、提案の質が低下する可能性があります。

問題18:
ProjectsとProjects Classicは、外部ツールやサービスとの統合機能に関してどのように異なりますか？

〇ProjectsもProjects Classicも外部ツールやサービスとの統合機能を提供しない
〇ProjectsとProjects Classicは同じ統合機能を持っている
〇Projectsは外部ツールとのより強力な統合を提供する
〇Projects Classicはより広範な統合オプションを持っている
回答: 〇Projectsは外部ツールとのより強力な統合を提供する

解説: Projectsは、外部ツールとの統合機能が強化されています。

問題19:
リポジトリの内部可視性を選択することについて正しいのはどれですか？

〇内部リポジトリを使用して、企業内で「インナーソース」を実践することができる
〇内部リポジトリへのアクセスを明示的に共有した人に制限できる
〇管理されたユーザーアカウントが内部リポジトリをフォークできる
〇組織のオーナーがコードにアクセスできないように制限できる
回答: 〇内部リポジトリを使用して、企業内で「インナーソース」を実践することができる

解説: 内部リポジトリは、企業内でのコラボレーションを促進するために使用されます。

問題20:
GitHubアカウントにテンプレートリポジトリを作成したい。どうすれば実現できますか？

〇リポジトリの構造とファイルを手動で新しいリポジトリにコピー＆ペーストする
〇GitHubマーケットプレイスからテンプレートリポジトリを取得する
〇既存のリポジトリをリポジトリ設定でテンプレートとしてマークする
〇リポジトリが作成されると自動的にテンプレートが作成される
回答: 〇既存のリポジトリをリポジトリ設定でテンプレートとしてマークする

解説: 既存のリポジトリをテンプレートとしてマークすることで、新しいリポジトリをそのテンプレートから作成できます。

問題21:
GitHubで組織をフォローすると、次のすべての公開活動を個人ダッシュボードで見ることができますが、次のうちどれは除外されますか？

〇組織のスポンサーシップ
〇組織のプロフィール変更
〇組織のリポジトリ
〇組織の新しいディスカッション
回答: 〇組織のスポンサーシップ

解説: 組織のスポンサーシップは、個人ダッシュボードに表示されない活動の一つです。

問題22:
GitHub Projectsを使用して、各チームメンバーに割り当てられたアイテムの数を視覚化するチャートを作成したい。どのタイプのチャートを作成すべきですか？

ユーザーチャート
現在のチャート
プロジェクトチャート
歴史的チャート
回答: 〇プロジェクトチャート

解説: プロジェクトチャートを使用することで、各チームメンバーに割り当てられたアイテムの数を視覚化できます。

問題23:
オープンソースソフトウェア開発の主要な原則は何ですか？

〇専有コードの共有と制限されたアクセス
〇閉じたコラボレーションと独占的所有権
〇オープンで透明なコミュニケーション、共同開発、コミュニティ主導の配布
〇制御された開発と限られたコミュニティの関与
回答: 〇オープンで透明なコミュニケーション、共同開発、コミュニティ主導の配布

解説: オープンソースソフトウェアは、透明性とコミュニティの参加を重視しています。

問題24:
フォークがリポジトリへの貢献を受け入れるのに最適なシナリオはどれですか？

〇プロジェクトに関与していない個人、例えばオープンソースの貢献者向け
〇内部チームメンバー専用
〇プロジェクトオーナー専用
〇自分のリポジトリをフォークするためだけ
回答: 〇プロジェクトに関与していない個人、例えばオープンソースの貢献者向け

解説: フォークは、プロジェクトに関与していない外部の貢献者が変更を提案するために最適です。

問題25:
GitHub Codespacesの秘密をリポジトリにコミットせずに適切に管理するにはどうすればよいですか？

〇自分のリポジトリをフォークするためだけ
〇機密情報をプライベートリポジトリに保存し、Codespacesがそのリポジトリにアクセスできるように設定する
〇HashiCorp Vaultのようなパスワード管理ソリューションを実行する中央集権的なコードスペースを作成し、そこから秘密にアクセスする
〇環境変数を介してCodespacesでアクセスしたい機密情報を保存することができる
回答: 〇機密情報をプライベートリポジトリに保存し、Codespacesがそのリポジトリにアクセスできるように設定する

解説: プライベートリポジトリに機密情報を保存することで、リポジトリにコミットせずに安全に管理できます。

問題26:
次のうち、GitHubリポジトリでのディスカッションとイシューの違いを最もよく説明するものはどれですか？

〇ディスカッションは一般的な会話やコラボレーションに使用され、イシューはバグや機能リクエストなどの特定の項目に対処する
〇イシューは一般的な会話専用で、ディスカッションはバグや機能リクエストなどの特定の項目を追跡し対処するために使用される
〇ディスカッションとイシューは同じ目的を持ち、GitHubリポジトリ内での一般的な会話やコラボレーションのためのプラットフォームを提供する
〇ディスカッションはバグ報告や機能リクエスト専用で、イシューはより広範な会話やコラボレーションのためのもの
回答: 〇ディスカッションは一般的な会話やコラボレーションに使用され、イシューはバグや機能リクエストなどの特定の項目に対処する

解説: ディスカッションは一般的なトピックについての会話に使用され、イシューは特定の問題やリクエストに焦点を当てています。

問題27:
新しいGitHub Actionsワークフローを構築していますが、時間を節約するためにGitHubコミュニティが作成したアクションを再利用したいと考えています。これらの再利用可能なアクションはどこで見つけることができますか？

〇リポジトリのディスカッションタブで再利用可能なアクションをすべて表示できる
〇公開されたアクションは各リポジトリのプロジェクトタブで見つけることができる
〇すべてのアクションはワークフローが作成されるときに事前に入力される
〇GitHubマーケットプレイスに公開されたアクションを検索、表示、使用できる
回答: 〇GitHubマーケットプレイスに公開されたアクションを検索、表示、使用できる

解説: GitHubマーケットプレイスでは、コミュニティが作成したアクションを見つけて使用することができます。

問題28:
MarkdownはGitやGitHubに関連してどのような役割を果たしますか？

〇MarkdownはGitHubリポジトリ内の文書の変更を追跡するために使用されるバージョン管理システムである
〇MarkdownはREADMEファイル、イシュー、文書、コメントのテキストをフォーマットするために使用される軽量マークアップ言語である
〇MarkdownはGitの機能であり、コード変更の視覚的なグラフを自動的に生成し、ユーザーがリポジトリ内の変更を迅速に追跡できるようにする
〇MarkdownはGitリポジトリ専用に設計されたプログラミング言語である
回答: 〇MarkdownはREADMEファイル、イシュー、文書、コメントのテキストをフォーマットするために使用される軽量マークアップ言語である

解説: Markdownは、GitHubでの文書作成や情報の整理に広く使用されるフォーマット言語です。

問題29:
請求マネージャーがGitHub組織内で実行できるアクションは何ですか？

〇GitHubマーケットプレイスアプリのサブスクリプションを購入、編集、またはキャンセルする
〇組織内のリポジトリを作成またはアクセスする
〇支払い方法を更新し、領収書をダウンロードし、組織のプライベートメンバーを確認する
〇アカウントをアップグレードまたはダウングレードし、支払い履歴を表示し、支払い方法を更新する
回答: 〇支払い方法を更新し、領収書をダウンロードし、組織のプライベートメンバーを確認する

解説: 請求マネージャーは、支払い方法の管理や領収書の確認を行うことができます。

問題30:
イシューテンプレートはいつ役立ちますか？（3つ選択）

〇貢献者がイシューを開くときに特定の構造化された情報を提供することを望む
〇非常に予測不可能で構造化されていない議論のあるプロジェクトで
〇バグ報告のために、貢献者がバグを再現する手順、期待される動作、実際の動作などの重要な情報を提供することを保証するため
〇イシューを開くためのガイダンスを提供したいとき
回答: 〇貢献者がイシューを開くときに特定の構造化された情報を提供することを望む、〇バグ報告のために、貢献者がバグを再現する手順、期待される動作、実際の動作などの重要な情報を提供することを保証するため、〇イシューを開くためのガイダンスを提供したいとき

解説: イシューテンプレートは、貢献者が必要な情報を提供するのを助け、プロジェクトの管理を効率化します。

問題31:
ラベルはGitHubでのコラボレーションと組織を強化するためにどのように使用できますか？

〇無制限のカスタムフィールドを作成できるようにすることによって
〇特性に基づいてイシューやプルリクエストを分類し、フィルタリングすることによって
〇ラベル付きのイシューを表示から隠すことによって
〇特定のラベルを持つイシューを自動的に閉じることによって
回答: 〇特性に基づいてイシューやプルリクエストを分類し、フィルタリングすることによって

解説: ラベルを使用することで、イシューやプルリクエストを整理し、特定のタスクを追跡しやすくなります。

問題32:
次のうち、GitHubリポジトリのセキュリティタブで追跡されないものはどれですか？

コードスキャン結果
〇セキュリティ上の理由でリポジトリに開かれたGitHubイシュー
セキュリティアドバイザリー
セキュリティポリシー
回答: 〇セキュリティ上の理由でリポジトリに開かれたGitHubイシュー

解説: セキュリティタブでは、コードスキャン結果やセキュリティアドバイザリーなどが追跡されますが、特定のイシューは含まれません。

問題33:
新しいリポジトリを作成する際に含めるべき推奨ファイルは何ですか？（5つ選択）

〇プロジェクトが有用である理由、プロジェクトでできること、使用方法を伝えるREADMEファイル
〇リポジトリ内のファイルの使用方法を伝えるライセンス
〇公開クラウドプラットフォームでアプリケーションをコンパイルして起動するために必要なパスワード、APIキー、またはアクセス・トークン
〇プロジェクトに関連するコンパイル済みコードやビルド出力ファイル
〇プロジェクトへの貢献方法に関するガイドラインを文書化するための貢献ファイル
〇リポジトリ内のコードに責任を持つ個人やチームを定義するCODEOWNERSファイル
〇Gitが無視すべきファイルやディレクトリをリストする.gitignoreファイル
回答: 〇プロジェクトが有用である理由、プロジェクトでできること、使用方法を伝えるREADMEファイル、〇リポジトリ内のファイルの使用方法を伝えるライセンス、〇プロジェクトへの貢献方法に関するガイドラインを文書化するための貢献ファイル、〇リポジトリ内のコードに責任を持つ個人やチームを定義するCODEOWNERSファイル、〇Gitが無視すべきファイルやディレクトリをリストする.gitignoreファイル

解説: これらのファイルを含めることで、リポジトリの利用や貢献がしやすくなります。

問題34:
次のうち、フォークされたリポジトリの特徴ではないものはどれですか？

〇フォークは、元の「アップストリーム」リポジトリとコードと可視性設定を共有する新しいリポジトリである
〇開発者はバグ修正に関連する変更を提案するためにフォークを使用できる
〇フォークは、ユーザーがアップストリームリポジトリへの書き込みアクセスを持っていない場合に変更を提案するために使用されることが多い
〇GitHubのフォークは、元のリポジトリと自動的に同期される
回答: 〇GitHubのフォークは、元のリポジトリと自動的に同期される

解説: フォークは独立したリポジトリであり、元のリポジトリと自動的に同期されることはありません。

問題35:
Johnは新しいチームメンバーをプロジェクトに招待したいと考えています。JohnはどのようにしてユーザーをGitHubリポジトリに招待できますか？

〇GitHubのリポジトリ設定にアクセスする
〇コードリポジトリへのリンクを共有する
〇メールで招待状を送信する
〇各コラボレーターのために別のリポジトリを作成する
回答: 〇GitHubのリポジトリ設定にアクセスする

解説: リポジトリ設定から新しいコラボレーターを招待することができます。

問題36:
GitHub Advanced Security (GHAS)ライセンスに含まれる機能は何ですか？（3つ選択）

コードスキャン
〇依存関係レビュー
〇Dependabotアラート
〇秘密スキャン
回答: 〇コードスキャン、〇依存関係レビュー、〇Dependabotアラート

解説: GHASライセンスには、コードスキャン、依存関係レビュー、Dependabotアラートが含まれています。

問題37:
ローカルマシンで新しいファイルを作成しました。Gitにその新しいファイルの追跡を開始させるために使用するコマンドは何ですか？

"git commit"
"git status"
"git log"
"git add"
回答: 〇"git add"

解説: "git add"コマンドを使用して、新しいファイルをGitに追加し、追跡を開始します。

問題38:
GitHubアカウントの二要素認証の第二の認証源として有効なオプションは何ですか？

〇モバイルまたはデスクトップのTOTPアプリやテキストメッセージを有効な2FAソースとして利用できる
〇メールやテキストメッセージを有効な2FAソースとして利用できる
〇GitHub Desktopをモバイルまたはデスクトップで使用するか、テキストメッセージを有効な2FAソースとして利用できる
〇GitHub.comやテキストメッセージを有効な2FAソースとして利用できる
回答: 〇モバイルまたはデスクトップのTOTPアプリやテキストメッセージを有効な2FAソースとして利用できる

解説: TOTPアプリやテキストメッセージは、GitHubアカウントの二要素認証に使用できる有効な方法です。

問題39:
プロジェクトマネージャーとして、SanjayはGitHubリポジトリ内の多くのイシューを追跡し、管理に定期的なステータスレポートを提供する任務を負っています。Sanjayは、特定の目標に関連するすべてのイシューのステータスを迅速に提供するためにProjectsでどの機能を使用できますか？

〇マイルストーンを作成し、関連するイシューを追加する
〇特定のアクセス権をチームメンバーに割り当ててイシューを効率的に管理する
〇GitHub Discussionsを使用して各イシューに関するスレッド化された会話を作成する
〇各イシューに対して個別のラベルを作成し、それらを関連性に基づいて分類する
回答: 〇マイルストーンを作成し、関連するイシューを追加する

解説: マイルストーンを使用することで、特定の目標に関連するイシューをまとめて追跡できます。

問題40:
GitHubリポジトリのホームページでGistを作成するオプションが見当たらない場合、どこに行ってGistを作成できますか？

〇リポジトリの「アクション」タブに移動する
〇リポジトリのホームページの「コード」タブにアクセスする
〇リポジトリ内で新しいファイルを作成し、それが自動的にGistになる
〇リポジトリのホームページではなく、Gistのホームページに行ってGistを作成する
回答: 〇リポジトリのホームページではなく、Gistのホームページに行ってGistを作成する

解説: GistはGitHubの専用ページから作成する必要があります。

問題41:
GitHubリポジトリでイシューを作成できるのは誰ですか？

〇リポジトリのオーナーのみがイシューを作成できる
〇リポジトリへの読み取りアクセスを持つ任意のGitHubユーザー
〇リポジトリへの書き込みアクセスを持つ貢献者
〇GitHubリポジトリに関連する組織のメンバーのみ
回答: 〇リポジトリへの書き込みアクセスを持つ貢献者

解説: イシューを作成できるのは、リポジトリへの書き込みアクセスを持つユーザーです。

問題42:
GitHub Projectsを管理するためのベストプラクティスとして評価されるものは何ですか？（5つ選択）

〇プロジェクト全体でタスクを完了するための自動化の使用を制限する
〇情報が同期しないのを防ぐために単一の真実のソースを持つ
〇説明、README、ステータス更新を活用する
〇コラボレーターとコミュニケーションを取り、特定の人やチームに注意を促すために@メンションを使用する
〇大きなイシューを小さなイシューに分解する
〇さまざまなフィールドタイプを利用してニーズに応じたフィールドタイプを活用する
回答: 〇プロジェクト全体でタスクを完了するための自動化の使用を制限する、〇情報が同期しないのを防ぐために単一の真実のソースを持つ、〇説明、README、ステータス更新を活用する、〇コラボレーターとコミュニケーションを取り、特定の人やチームに注意を促すために@メンションを使用する、〇大きなイシューを小さなイシューに分解する

解説: これらのベストプラクティスを実践することで、プロジェクト管理が効率的になります。

問題43:
Daveは最近、GitHubの二要素認証の資格情報へのアクセスを失いました。Daveはアカウントへのアクセスを回復するためにどのようなアクションを実行できますか？

〇残念ながら、Daveは二要素認証の資格情報を失った場合、GitHubアカウントにアクセスできなくなる
〇Daveはリカバリーコードを使用してアカウントへのアクセスを回復できる
〇DaveはGitHubにパスワードのリセットをリクエストしてアカウントへのアクセスを回復できる
〇DaveはGitHubサポートに電話してアカウントの二要素認証要件を削除するように依頼できる
回答: 〇Daveはリカバリーコードを使用してアカウントへのアクセスを回復できる

解説: リカバリーコードを使用することで、二要素認証の資格情報を失った場合でもアカウントにアクセスできます。

問題44:
バージョン管理システム（VCS）の目標ではないものはどれですか？

〇ファイルが作成または変更される際に業界規制に準拠することを保証する
〇複数のチームメンバーが共同作業環境でプロジェクトに取り組むことを可能にする
〇個々のファイルやプロジェクト全体の以前のバージョンを取得または表示する
〇ファイルに加えられたすべての変更、変更が行われた時期、誰が変更したかを確認する
回答: 〇ファイルが作成または変更される際に業界規制に準拠することを保証する

解説: VCSの主な目標は、共同作業を促進し、変更履歴を管理することです。

問題45:
あなたの組織は、アプリケーションの開発を加速するためにGitHub Copilotの使用を開始したいと考えています。アクセスを許可する前に、管理者は企業全体のポリシーを実装し、特定のファイルを評価から除外できるようにする必要があります。組織はどのように進めるべきですか？

〇すべてのユーザーにGitHub Copilot Individualを展開し、各個人にポリシーを説明する
〇制限なしで試用期間中にGitHub Copilot Individualを有効にしてその効果を評価する
〇管理者のみがGitHub Copilot Businessへのアクセスを制限し、ポリシーとファイルの除外を管理できるようにする
〇ユーザー向けにCopilot Businessを実装し、会社の要件を満たすようにサービスを構成する
回答: 〇ユーザー向けにCopilot Businessを実装し、会社の要件を満たすようにサービスを構成する

解説: GitHub Copilot Businessを使用することで、企業のポリシーに従った管理が可能になります。

問題46:
作業中のプロジェクトを含むネストされたディレクトリとファイルのセットの名前は何ですか？

プルリクエスト
作業ツリーまたはディレクトリ
コミット
イシューまたはディスカッション
回答: 〇作業ツリーまたはディレクトリ

解説: 作業ツリーは、現在の作業中のプロジェクトを含むファイルとディレクトリのセットを指します。

問題47:
イシューやプルリクエストにユーザーを割り当てるために必要な最小限の権限は何ですか？

書き込み権限
読み取り権限
管理者権限
〇ユーザーにイシューやプルリクエストを割り当てるために権限は必要ない
回答: 〇書き込み権限

解説: イシューやプルリクエストにユーザーを割り当てるには、書き込み権限が必要です。

問題48:
チームでGitHub Codespacesの使用を監視しており、コストを最適化する任務を負っています。効率的なリソース利用を確保しながらコストを削減するにはどうすればよいですか？

〇チームにgithub.devを使用してアプリケーションをテストするように依頼する
〇コードスペースの自動削除のデフォルト保持期間を短縮する
〇開発者にGitHub Freeアカウントを作成させ、コードスペースの無料プランを使用できるようにする
〇コードスペースをプロジェクトに追加し、イシューが閉じられたときにコードスペースを削除するワークフローを作成する
回答: 〇コードスペースの自動削除のデフォルト保持期間を短縮する

解説: 自動削除の保持期間を短縮することで、使用していないコードスペースを早期に削除し、コストを削減できます。

問題49:
GitHubは、オープンソースプロジェクトの進展を支援するために、次のすべてを提供していますが、次のものは除外されますか？

〇ソフトウェア開発機能とサービス
法的遵守
〇報告されたセキュリティ脆弱性を特定して修正するためのコードスキャン
〇ソフトウェア開発ワークフロー全体で学び、活用するためのベストプラクティス
回答: 〇法的遵守

解説: GitHubは、オープンソースプロジェクトを支援するために多くの機能を提供していますが、法的遵守はその一部ではありません。

問題50:
Ryanは、コマンドラインを通じてGitHubリポジトリに新しいファイルを追加したいと考えています。ファイルを追加し、変更をホストされたリポジトリに同期するために使用する正しいコマンドの順序は何ですか？

〇"git pull" 　"git add project.txt" 　"git commit -m "add new project file""
〇"git add project.txt" 　"git commit -m "add new project file"" 　"git push"
〇"git clone" 　"git add project.txt" 　"git commit" 　"git push"
〇"git init" 　"git commit" 　"git branch" 　"git add project.txt"
回答: 〇"git add project.txt" 　"git commit -m "add new project file"" 　"git push"

解説: 新しいファイルを追加するには、まず"git add"でファイルを追加し、次に"git commit"で変更をコミットし、最後に"git push"でリモートリポジトリにプッシュします。

問題51:
毎朝、プロジェクトが進行し続け、誰かをブロックしていないことを確認するために、最優先の通知を確認する必要があります。どのフィルターを使用すべきですか？（3つ選択）

〇チームのメンバーが@メンションされたイベントをreason:team-mentionフィルターを使用して
〇プロジェクトリポジトリ内のファイルの変更をis:discussionフィルターを使用して
〇あなたのユーザー名が@メンションされたイベントをreason:mentionフィルターを使用して
〇あなたのレビューが要求されたプルリクエストをreason:review-requestedフィルターを使用して
回答: 〇チームのメンバーが@メンションされたイベントをreason:team-mentionフィルターを使用して、〇あなたのユーザー名が@メンションされたイベントをreason:mentionフィルターを使用して、〇あなたのレビューが要求されたプルリクエストをreason:review-requestedフィルターを使用して

解説: これらのフィルターを使用することで、重要な通知を効率的に確認できます。

問題52:
MarionはプライベートGitHubコードリポジトリの特定の機能を無効にしたいと考えています。彼女が無効にできる機能は何ですか？（3つ選択）

イシュー
認証
アクション
プロジェクト
回答: 〇イシュー、〇アクション、〇プロジェクト

解説: Marionは、プライベートリポジトリの特定の機能を無効にすることができます。

問題53:
GitHub Projectsは、プロジェクトに関連するオープンイシューを表示するためのいくつかのレイアウトを提供します。GitHubで利用できないレイアウトはどれですか？

リストレイアウト
テーブルレイアウト
ボードレイアウト
ロードマップレイアウト
回答: 〇リストレイアウト

解説: GitHub Projectsでは、リストレイアウトは提供されていません。

問題54:
現在Gitが追跡している変更を確認し、コミットが必要なファイルがあるかどうかを確認するために使用するコマンドは何ですか？

"git commit"
"git status"
"git log"
"git add"
回答: 〇"git status"

解説: "git status"コマンドを使用することで、現在の変更状況を確認できます。

問題55:
特に重要で、プロジェクトのすべての貢献者に関連する会話があります。このディスカッションをすべての人に目立たせるために適切なアクションは何ですか？

〇ディスカッションに「重要」と返信して強調表示する
〇ピン留めしてすべてのコラボレーターに対する可視性を向上させる
〇ディスカッションはGitHubリポジトリで強調表示またはピン留めできない
〇ディスカッションにスターを付けて、他の人に重要な更新の通知を受け取らせる
回答: 〇ピン留めしてすべてのコラボレーターに対する可視性を向上させる

解説: ディスカッションをピン留めすることで、他のコラボレーターが簡単に見つけられるようになります。

問題56:
GitHub Actionsを開発プロセスに組み込むことで、効率の向上と開発サイクルの加速にどのように寄与しますか？（3つ選択）

〇GitHub Actionsは、マージ前にプルリクエスト内で見つかったコードエラーの修正を自動化できる
〇GitHub Actionsは、プルリクエストが作成されるとすぐにコードのテストなどのタスクを自動化できる
〇GitHub Actionsは、誰かがリポジトリに新しいイシューを作成するたびに適切なラベルを自動的に追加できる
〇GitHub Actionsは、コードがメインブランチにマージされた後に、アプリケーションのデプロイやスクリプトの実行などの複数のジョブを実行できる
回答: 〇GitHub Actionsは、マージ前にプルリクエスト内で見つかったコードエラーの修正を自動化できる、〇GitHub Actionsは、プルリクエストが作成されるとすぐにコードのテストなどのタスクを自動化できる、〇GitHub Actionsは、コードがメインブランチにマージされた後に、アプリケーションのデプロイやスクリプトの実行などの複数のジョブを実行できる

解説: GitHub Actionsを使用することで、開発プロセスの自動化が進み、効率が向上します。

問題57:
GitHub Enterprise Cloudの管理者がGitHub.comで企業リソースへのアクセスを提供するための有効なオプションは何ですか？

〇GitHub.comの個人アカウントを許可する
〇GitHub.comのエンタープライズ管理ユーザーを許可する
〇すべての上記
〇SAMLアクセス制限のあるGitHub.comの個人アカウントを許可する
回答: 〇すべての上記

解説: GitHub Enterprise Cloudの管理者は、さまざまな方法で企業リソースへのアクセスを提供できます。

問題58:
GitHubプロジェクトは、イシューやプルリクエストの変更をどのように自動的に最新の状態に保ちますか？

〇アサイン、マイルストーン、ラベルなどのフィールドの変更を自動的に反映することによって
〇プロジェクト管理で自動化の使用を避けることによって
〇プロジェクトコラボレーターへのアクセスを制限することによって
〇各タスクの手動更新を要求することによって
回答: 〇アサイン、マイルストーン、ラベルなどのフィールドの変更を自動的に反映することによって

解説: GitHubプロジェクトは、イシューやプルリクエストの変更を自動的に反映させることで、常に最新の状態を保ちます。

問題59:
Thomasは、コード変更を頻繁にレビューし、「素晴らしい、変更を承認します🚀」のような迅速で肯定的な反応を提供する方法を探しています。Thomasは同じ反応を何度も入力する必要なく、変更を承認するために何を使用できますか？

GitHub Discussions
GitHub Saved Replies
GitHub Project Board
GitHub Actions
回答: 〇GitHub Saved Replies

解説: GitHub Saved Repliesを使用することで、よく使うフレーズを保存し、迅速に反応を提供できます。

問題60:
GitHubでプルリクエストをレビューする際、「変更されたファイル」タブの目的は何ですか？

〇「変更されたファイル」タブは、すべてのコミット履歴を表示する
〇「変更されたファイル」タブは、マージ後に表示される提案された変更を明らかにする
〇「変更されたファイル」タブは、コミットのリストを表示する
〇「変更されたファイル」タブは、コミット時間に基づいてファイルを降順に整理する
回答: 〇「変更されたファイル」タブは、マージ後に表示される提案された変更を明らかにする

解説: 「変更されたファイル」タブでは、プルリクエストで提案された変更がどのように見えるかを確認できます。
