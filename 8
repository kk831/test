━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 1. サードパーティ製ツールを使ったコード スキャンの流れ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

リポジトリ外やサードパーティのCI/CD環境で、スタティック解析ツールを使って分析する。
ツールが出力するSARIFファイル(v2.1.0フォーマット)を取得する。
GitHub Actions や API を使って、そのSARIFファイルをリポジトリにアップロードする。
GitHub 側が解析結果を取り込み、リポジトリの [Code scanning alerts] タブに提示する。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 2. SARIF アップロードのメリット・注意点
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

GitHub を利用した解析 (CodeQL 等) だけでなく、他のツールで生成された結果もリポジトリのアラート画面に統合できます。
同じ問題の重複アラートが発生しないよう、GitHub 側で “fingerprint” (指紋) を確認します。
SARIF アップロード時には最大 5,000 件の結果まで表示可能、ファイルサイズは gzip 圧縮されて10MB以内が必要です。
partialFingerprints が SARIF ファイルに含まれない場合は、GitHub がソースコードから自動計算を試みるため、リポジトリ内にソースコードが存在している必要があります。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 3. SARIF ファイルのアップロード方法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
コード スキャン アラートをアップロードする手段として、大きく下記2つの方法があります。

(A) GitHub Actions
(B) コードスキャン API (REST API)
いずれも、アップロード結果は同じく [Code scanning alerts] に表示されます。

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
◆ (A) GitHub Actions を使う方法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
GitHub Actions のワークフロー内で、「upload-sarif」アクションを利用し、SARIF ファイルをアップロードします。

下記の例では、リポジトリ内に “results.sarif” という解析結果ファイルがあることを想定しています。
プッシュ時 (push) とスケジュール (cron) に応じて週1回実行され、解析結果をアップロードする簡易例です。

YAML
name: "Upload SARIF"

// このワークフローはリポジトリにプッシュされたときと、
// 毎週木曜日の15:45(UTC)にスケジュールで実行されます。
on:
  push:
  schedule:
    - cron: '45 15 * * 4'

jobs:
  upload-sarif-job:
    runs-on: ubuntu-latest
    permissions:
      # Code Scanning への書き込み権限が必要
      security-events: write
    steps:
      # リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v2

      # SARIF ファイルをアップロード
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          # リポジトリ直下に置いている results.sarif を指定
          sarif_file: results.sarif
上記ワークフローを .github/workflows/ ディレクトリに配置すると、条件を満たすたびに自動で SARIF ファイルがアップロードされ、Code Scanning アラートとして表示されます。

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ (A)-1. CI 内でサードパーティ製ツールを実行し、その場でアップロードする例
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
たとえば、ESLint やその他の静的解析ツールが SARIF 形式でレポートを出力できる場合、その実行結果を “results.sarif” として保存し、直後にアップロードできます。下記は ESLint と sarif 形式フォーマッタを組み合わせた例です。

YAML
name: "ESLint analysis"

// このワークフローはリポジトリにプッシュされたときと、
// 毎週水曜日の15:45(UTC)に実行されます。
on:
  push:
  schedule:
    - cron: '45 15 * * 3'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v2

      # 依存パッケージをインストール
      - name: Run npm install
        run: npm install

      # ESLintを実行し、SARIFフォーマットで出力
      - name: Run ESLint
        run: |
          node_modules/.bin/eslint build docs lib script spec-main \
            -f node_modules/@microsoft/eslint-formatter-sarif/sarif.js \
            -o results.sarif || true

      # 生成されたresults.sarifをGitHubにアップロード
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif
“|| true” の部分は、ESLint でエラーや警告が出てもワークフロー全体が失敗しないようにするための対策です。
API制限などに引っ掛からない範囲で、好きなイベントやスケジュールに合わせて設定できます。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
◆ (B) コードスキャン API (REST API) を使う方法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
GitHub REST API のエンドポイント (例: /orgs/ORG/code-scanning/alerts など) を利用して、コードスキャンのアラートを取得・アップロードできます。たとえば、外部で大規模にSARIFを生成し、API経由で一括でアップロードする手段として有効です。

SARIFファイル (2.1.0 形式) を生成する。
アップロード用のエンドポイント (POST /repos/{owner}/{repo}/code-scanning/sarifs) などを利用し、"application/sarif+json" を指定したうえで送信する。
アップロード成功時、GitHub 側で解析が走り、アラートが作成される。
大まかな手順 (ローカルスクリプト例):

bash
curl -X POST \
  -H "Authorization: Bearer <YOUR_TOKEN>" \
  -H "Accept: application/vnd.github+json" \
  -H "Content-Type: application/sarif+json" \
  -d @results.sarif \
  "https://api.github.com/repos/<OWNER>/<REPO>/code-scanning/sarifs"
の部分は適切な権限 (repo, security_events など) を持つ PAT (Personal Access Token) や GitHub App トークンを使用してください。
“-d @results.sarif” でローカルファイルをそのまま送信して、application/sarif+json としてアップロードします。
成功すると、エンドポイントからアップロードIDやステータスが返ってきます。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 4. 部分的な指紋 (partialFingerprints) について
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

指紋情報がない場合でも、リポジトリ内にソースコードと SARIF ファイルが揃っていれば GitHub 側で自動生成し、重複アラートを排除します。
解析結果のツールによっては partialFingerprints を自動生成してくれるものもあります。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 5. 本番運用における考慮事項
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

SARIF ファイルのサイズ上限 (10MB, gzip圧縮時) と結果数(最大5,000) は要注意。
解析対象やルールを適度に絞りこまないと、結果が多すぎて一部が無視される可能性があります。
スケジュール頻度や環境負荷を考慮しつつ、開発フローに組み込むのがおすすめです(プルリクエスト単位、あるいは毎日1回など)。
コードスキャン API や CI ワークフローとの連携で自動化しておくと、開発者が手動でアップロードする手間を省けます。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ まとめ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

サードパーティ製ツールで生成したSARIFファイルを GitHub にアップロードすることで、リポジトリの Code Scanning アラートに統合表示できます。
GitHub Actions (upload-sarif) を利用するか、REST API を利用するかの2つが代表的な方法です。
SARIF のバージョンやファイルサイズ・結果数上限を守りながら運用し、GitHub 上のアラート管理と組み合わせることで、脆弱性や品質問題を一元管理することが可能です。
