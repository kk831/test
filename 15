━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 1. 設定の同期 (VS Code)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Visual Studio Code (デスクトップ版) と web クライアント間で設定を同じに保てます。
拡張機能・テーマ・キーボード ショートカットなどを同期し、Codespace でも同じ環境を再現できます。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 2. ドットファイルの利用
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

シェルの設定ファイル (.bashrc や .zshrc など) を入れたドットファイル専用リポジトリを用意し、GitHub アカウントに紐づけます。
Codespace 作成時に自動的にクローン＆設定を反映してくれるため、好みの環境がどの Codespace でも利用できます。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 3. devcontainer.json による環境定義
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Codespaces では .devcontainer/devcontainer.json を用いてコンテナー環境を調整できます。 例えば、Dockerfile やインストールする拡張機能、エディター設定などをまとめて管理可能です。

以下はシンプルな devcontainer.json の例です:

JSON
{
  "name": "Custom Codespace",
  "image": "mcr.microsoft.com/devcontainers/python:3.9", 
  // ここで指定したベースイメージを用いてコンテナを作成

  "settings": {
    "terminal.integrated.shell.linux": "/bin/bash",
    "editor.formatOnSave": true
  },

  "extensions": [
    "ms-python.python", 
    "ms-python.vscode-pylance"
  ],

  // 各種ポート指定やビルド時の前処理なども設定可能
  "forwardPorts": [8000, 8080]
}
＜このファイルをリポジトリの .devcontainer ディレクトリに置いておくと、Codespace 作成時に自動的に反映されます。＞

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 4. Shell の切り替え
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

新しいターミナルを開く際に任意のシェル (bash/zsh/fish など) を選びます。
ドットファイルや devcontainer.json で設定を加えれば、毎回自分好みのシェルを起動できます。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 5. マシンの種類変更
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

リソース不足を感じたときは、"Change machine type" (VS Code ウィンドウ下部の Codespaces タブ等) から上位マシンへ切り替えると CPU/メモリを増やせます。
切り替え後は Codespace を再起動して設定を反映しましょう。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 6. 既定のエディター・リージョン・タイムアウト
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

個人用設定 (https://github.com/settings/codespaces) で「既定のエディター (VS Code / JetBrains / JupyterLab)」 や「リージョン (データセンター場所)」を変更可能です。
タイムアウト (非アクティブ時に自動停止するまでの時間) や自動削除設定も、用途に合わせて調整できます。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 7. VS Code / JetBrains の拡張機能・プラグイン
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

VS Code Marketplace から拡張機能を追加でき、設定の同期を使えば自動的に Codespace にも反映されます。
JetBrains IDE で Codespace を利用している場合も JetBrains Marketplace のプラグインを入れることで機能拡張が可能です。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ まとめ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
GitHub Codespaces では devcontainer.json、ドットファイル、設定の同期機能などを活用し、どのプロジェクトでも一貫した開発環境を用意できます。環境構築に時間を取られず、快適にコーディングを進められるのが大きなメリットです。目的や作業内容に合わせて、マシントタイプ・シェル・拡張機能などを柔軟にカスタマイズしてみてください。
