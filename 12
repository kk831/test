━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 1. インライン サジェスチョン
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

コードを入力すると、その場で Copilot がリアルタイムに補完提案 (淡色表示) を行います。
提案を受け入れるには Tab キーまたは → (右方向キー)、拒否するには入力を続けるか Esc キーを押します。
よく使う定型コードや反復的な処理を素早く記述する際に便利です。
＜例: Python の関数作成時＞

Python
def calculate_average(numbers):
    # Start typing here and watch Copilot suggest the function body
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 2. コマンド パレット
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Ctrl+Shift+P (Windows/Linux) または Cmd+Shift+P (Mac) でパレットを開き、「Copilot」と入力すると、使用可能なコマンドが表示されます。
[これを説明する] や [単体テストの生成] など多彩なアクションを簡単に呼び出せます。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 3. Copilot チャット
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

IDE 内のチャットパネルで自然言語を使って Copilot とやり取りできます。
例: 「Python でバイナリ検索を実装するには?」などと聞くと、関連コードや説明が返ってきます。
＜例: Python でのバイナリ検索＞

Python
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 4. インライン チャット
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

エディター内で特定のコードに焦点を当て、直接質問や変更を要求できます。
カーソルを対象コードに置き、Ctrl+I (Windows/Linux) または Cmd+I (Mac) でインライン チャットを開きます。
コードの内容に即したサポートを得られるため、短いフィードバックや細かい修正に最適です。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 5. コメントをコードに変換
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

必要な処理を自然言語のコメントで書き、Enter を押すだけで、Copilot が自動生成したコードを候補として提示します。
シンプルなタスク (文字列の反転など) をすばやく下書きするのに役立ちます。
＜例: Python の場合＞

Python
# Function to reverse a string
def reverse_string(s):
    # Copilot suggests the function body here
Copilot が生成するコード例:

Python
# Function to reverse a string
def reverse_string(s):
    return s[::-1]
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 6. 複数の提案
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Copilot が複数の代替案を出す場合、電球アイコンまたは Alt+] (Windows/Linux), Option+] (Mac) で切り替えられます。
複数のアプローチを検討し、最適な実装を選択可能です。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 7. コードの説明機能
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

選択したコードブロックに対して [これを説明する] を実行すると、Copilot によるコードの解説を表示できます。
見知らぬプロジェクトや他のメンバーが書いたコードを理解する際に便利です。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 8. 自動化されたテスト生成
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

関数やクラスを選択して [Copilot]: [単体テストの生成] を実行すると、テストコードの下書きを生成してくれます。
テストを記述する手間を減らし、開発初期段階でのバグ検出に役立ちます。
＜例: Python の add 関数に対するテスト＞

Python
def add(a, b):
    return a + b

# Copilot might generate a test like this:
def test_add():
    assert add(2, 3) == 5
    assert add(-1, 1) == 0
    assert add(0, 0) == 0
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ まとめ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Copilot は入力内容やコメントに基づいて学習し、提案の精度を高めます。
こまめにコメントをつけ、明確な意図を示すことで、より適切なコード サジェスチョンを得られます。
インライン補完、チャット、テスト生成など、多様なアプローチを組み合わせて使うことで、開発効率を大きく向上できます。
