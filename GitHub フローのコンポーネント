────────────────────────────────────────────
■ ブランチ (Branch)
────────────────────────────────────────────
• ブランチとは、メインの開発ライン (既定のブランチ) に影響を与えずに作業できる“分岐”のようなものです。
• 新機能の追加やバグ修正など、自由に変更を加えられる“安全な場所”として使います。
• もし間違えた変更を加えてしまっても、ブランチ上で修正し直すだけなので、メイン ブランチを壊すリスクを下げられます。
• ブランチを作成・チェックアウトする方法としては、

GitHub 上の UI からの操作
ターミナルで git checkout -b newBranchName を実行
といったやり方があります。
• 作業が完了してプルリクエストを承認・マージするまでは、メイン ブランチの内容は変わりません。
────────────────────────────────────────────
■ コミット (Commit)
────────────────────────────────────────────
• コミットとは、ブランチ上で行った変更を記録する行為、または記録された変更そのものを指します。
• 1 回のコミットには、1 つ以上のファイル変更が含まれ、それぞれに一意のコミット ID、作成時刻、作成者などが紐づけられます。
• コミットはプロジェクトの“監査証跡”となるため、誰がいつどのような変更をしたかを追跡できます。
• Git が管理するファイルは大きく以下の状態を取ります：

追跡対象外 (Untracked): リポジトリにまだ含まれておらず、Git が認識していない状態
追跡対象 (Tracked): Git が認識している状態で、さらに以下の下位状態があります：
未変更 (Unmodified): 直近のコミット以降で変更がない
変更済み (Modified): 直近のコミット以降に変更があり、まだステージされていない
ステージ済み (Staged): 変更を次のコミット候補としてステージング領域 (インデックス) に追加した状態
コミット済み (Committed): 実際にコミットされてリポジトリに記録された状態
• これらの状態を理解すると、プロジェクト内でどのファイルがどの段階にあるかを正しく把握できます。
────────────────────────────────────────────
■ プルリクエスト (pull request)
────────────────────────────────────────────
• プルリクエストとは、あるブランチで行ったコミットを、別のブランチ (例えばメイン ブランチ) に“マージしても良いか”をチームに知らせる仕組みです。
• プルリクエストを作成すると、コードのレビュー担当者にその変更をチェックしてもらい、問題がなければマージを承認してもらえます。
• 変更点や実装内容を議論する場所としても活用でき、ファイルへのコメントや追加の修正が提案される場合もあります。
• 変更が承認されると、リクエスト元 (ソース) ブランチの変更がベース ブランチにマージされ、プロジェクトのメインラインへ正式に組み込まれます。

────────────────────────────────────────────
■ GitHub フロー (GitHub Flow)
────────────────────────────────────────────
• GitHub フローは、ブランチ・プルリクエスト・マージを中心とした“軽量なワークフロー”です。
• ブランチを使うことで安全に作業し、プルリクエストでコラボレーターからフィードバックを受け、レビューを通じて高品質なコードをメイン ブランチに統合できます。
• 具体的な流れは以下のとおりです：

ブランチを作成する
メイン ブランチに直接影響を与えないように、作業手順ごとに専用のブランチを切ります。
変更を加え、コミットを行う
作成したブランチで新機能の実装や修正を行い、コミットを積み重ねます。
プルリクエストを作成する
レビュー担当者に変更内容を共有し、議論やフィードバックを得ます。
リポジトリによっては、承認レビューが必須のこともあります。
フィードバックの反映・修正
指摘を受けて修正した場合は、追加のコミットをプッシュして再度レビューを依頼します。
レビュー承認後、マージする
問題が解決したら、プルリクエストをマージしてメイン ブランチに変更を取り込みます。
ブランチを削除する
作業が完了し、不要になったブランチは削除して、不要な混乱を避けます。
このサイクルを回すことで、新しいアイデアの検証や安全なコラボレーションがスムーズに行えます。

────────────────────────────────────────────
■ まとめ
────────────────────────────────────────────
• ブランチ: 新しい機能や修正を安全に試すための分岐
• コミット: 変更を記録する単位で、監査証跡として重要
• プルリクエスト (pull request): ブランチ上の変更をレビューしてマージを促す仕組み
• GitHub フロー: ブランチ、プルリクエスト、マージを活用し、軽量かつ安全に開発を進める方法

上記のコンポーネントを正しく使うと、メイン ブランチを常に安定させながら効率的に機能追加やバグ修正を行うことができます。これらのステップを理解しておくと、チーム開発でも個人開発でもスムーズにコードを管理できるようになります。
