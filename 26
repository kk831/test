────────────────────────────────────

InnerSource とは
────────────────────────────────────
• オープンソースの手法（誰でもコードを閲覧・変更・配布できる仕組み）を、限定された組織内で適用することを指します。
• 企業のファイアウォール内で、オープンソースライクなプログラムとコラボレーション手法を導入し、組織メンバーだけがアクセスできるプロジェクトを運営する形態です。
────────────────────────────────────
2. InnerSource の主なベネフィット
────────────────────────────────────

(1) 透過性（トランスパレンシー）の促進
• 他のチームがどのように課題を解決しているかが見えるため、コードやアイデアの再利用がしやすくなります。
• イシュー、Pull Request、プロジェクト計画が公開されていれば、開発の速度や方向性を把握しやすくなります。

(2) 摩擦の減少
• 他チームのプロジェクトにバグ修正や新機能が必要な場合、Pull Request などを通じて直接変更を提案できます。
• 提案が受け入れられない場合でも、フォークによって自分たちのニーズに合った形でプロジェクトを分岐させることが可能です。

(3) プラクティスの標準化
• 異なるチーム同士でも同じベースルール（コントリビューションの方法、レビューの流れなど）を共有しやすくなるため、コラボレーションが円滑に行えます。
• チームごとに異なるプロセスを標準化することで、どのチームへも気軽にコントリビューションを行えるようになります。

────────────────────────────────────
3. InnerSource プログラムを GitHub で設定・管理する手順
────────────────────────────────────

3.1 リポジトリの可視性と権限設定
• GitHub のリポジトリには以下の 3 種類の可視性があります:

Public (パブリック)
誰でもアクセスできるオープンソースプロジェクト向け。
Internal (内部)
組織メンバーのみアクセス可能。InnerSource プロジェクトにはこの設定を推奨。
Private (プライベート)
所有者や招待されたチーム・ユーザーのみアクセス可能。限定的に行いたい場合に使用。
• アクセス権限レベルは以下の 5 つがあります:

Read
コードを見たりディスカッションに参加するのみで十分な共同作業者向け。
Triage
イシューや Pull Request の管理に集中する共同作業者向け（書き込み権限は不要）。
Write
プロジェクトに積極的にコードをプッシュする共同作業者向け。
Maintain
リポジトリの管理作業を行うが、破壊的な操作を行う必要がないプロジェクト マネージャー向け。
Admin
セキュリティやリポジトリの削除など、すべての操作が必要な人向け。
• 内部リポジトリをベースに、高レベルに管理しつつ、必要に応じて細かい権限を設定することが重要です。

3.2 検出可能なリポジトリを作成する
• プロジェクト数が増えるにつれて、目的のリポジトリを探しやすくする工夫が必要です。
• リポジトリ名は warehouse-api、supply-chain-web のように、何をするものか分かりやすい名前をつけましょう。
• リポジトリの概要を 1～2 文程度で簡潔に書き、ライセンスや README.md を忘れずに追加しましょう。

README.md はリポジトリ訪問時のランディングページになり、内容把握の鍵となります。
3.3 README.md ファイルを追加する
• プロジェクトの目的やビジョンを明確に記載し、利用者やコントリビューターが理解しやすい情報を提供します。
• 実際の画面キャプチャやコード例を入れて、どんなプロジェクトか具体的にイメージできるようにします。
• 必要な前提条件やデプロイ手順、依存関係などをまとめ、再利用してもらいやすくします。
• README.md をリポジトリのルート、.github、docs ディレクトリのいずれかに配置すると、GitHub はそれを自動的に表示します。

3.4 リポジトリでのプロジェクト管理
• プロジェクト運営が大きくなると、イシューやコントリビューションの管理が大変になります。
• CONTRIBUTING.md を用意して、コントリビューションの方針（PR の送信先やバグレポートに必要な情報など）を明確にしましょう。

CONTRIBUTING.md は、ユーザーがイシューや Pull Request を作成する際に GitHub 上でリンクを表示してくれるため、手順を周知しやすくなります。
• CODEOWNERS ファイルを追加すれば、特定のディレクトリやファイルのレビュー責任者（担当者）を設定できます。
3.5 イシューと Pull Request のテンプレート作成
• / .github/ISSUE_TEMPLATE.md にイシュー用テンプレートを置くことで、報告や要望を受ける際に必要な項目をあらかじめ提示できます。
• / .github/PULL_REQUEST_TEMPLATE.md を用意すると、Pull Request 作成時に最初に表示されるメッセージを定義できます。

これらのテンプレートを使うと、ユーザーやコントリビューターが必要事項を埋めるだけで適切な情報を提供しやすくなります。
3.6 ワークフローを定義する
• チーム外部からのコントリビューションを受け入れる場合、バグ修正や新機能開発のためのブランチ運用ポリシーを明確にします。

例: GitHub フローや Git ブランチ戦略に従う場合は、その手順をドキュメントにまとめる。
• リリースやデプロイ手順も含め、コラボレーターが作業全体を把握できるようにしておきましょう。
────────────────────────────────────
4. InnerSource プロジェクトの成果を測定する
────────────────────────────────────
• 従来の「市場投入までの時間」「報告されたバグ数」などの指標だけでなく、以下の観点も検討します:

外部チームからの Pull Request やバグ修正の貢献度。
イシューへの議論の活発さ、組織内でのコラボレーションの広がり。
• 個人単位ではなくチームやプロセスの改善に焦点を当てることで、適切なカルチャと協力関係を育みます。
• 測定対象例:
一意のコントリビューター数
再利用するプロジェクト数
チーム間での @mentions や共同作業の頻度
• メトリックは誤用するとマイナス効果を生む場合もあるため、組織カルチャとの整合性を考えた上で導入しましょう。

────────────────────────────────────
5. まとめ
────────────────────────────────────
InnerSource プログラムを成功させるには、以下のポイントが重要です:

透明性を高めてコードや情報を共有しやすくする。
共同開発における摩擦を減らし、スムーズに改善提案・コントリビューションができる場を作る。
組織全体で標準的なプラクティスを広げ、再利用性や他チーム連携を促進する。
コントリビューターの流入を見越して、README や CONTRIBUTING.md、イシュー/PR テンプレートなどをしっかり整備する。
ワークフローやリリース手順を明確にして、コラボレーションを混乱なく進める。
適切なメトリックを設定し、InnerSource で得られるメリットが分かる形で成果を測定する。
