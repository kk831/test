────────────────────────────────────────

ユーザー名・パスワード (基本認証)
────────────────────────────────────────
• 既定の HTTP 認証スキーム (ユーザー名とパスワード) を使う方法です。
• セキュリティ リスクが高いため、より安全な別の手段 (個人用アクセス トークンや SSH キーなど) を利用することが推奨されています。
────────────────────────────────────────
2. 個人用アクセス トークン (PAT)
────────────────────────────────────────
• GitHub の設定画面からトークンを発行し、リポジトリや組織へのアクセス権を細かく設定できます。
• ユーザー名とパスワードの代わりとして、GitHub CLI や API、git コマンドなどで使用できます。
• トークンの権限や有効期限を適切に設定することで、不要なアクセスを最小限に抑えられます。

▼ 例: cURL で GitHub API を呼び出すときの認証
以下の例では、個人用アクセス トークンを使ってユーザー情報を取得しています。

bash
# <YOUR_PERSONAL_ACCESS_TOKEN> 部分に実際のトークンを入れてください
curl -H "Authorization: token <YOUR_PERSONAL_ACCESS_TOKEN>" \
     https://api.github.com/user
────────────────────────────────────────
3. SSH キー
────────────────────────────────────────
• ユーザーは SSH キーを生成し、GitHub アカウントに公開鍵を登録して認証を行います。
• 毎回ユーザー名やトークンを打ち込む必要がなく、ローカルで鍵を管理できるため利便性が高いです。
• 2FA (後述) と組み合わせることで、さらにセキュリティを強化できます。

▼ 例: SSH キーの利用イメージ

ローカル環境で SSH キーを作成 (ssh-keygen など)
公開鍵 (id_rsa.pub など) を GitHub の「SSH and GPG keys」画面に登録
クローンやプッシュには SSH URL を使用
(例)
bash
git clone git@github.com:your-org/your-repo.git
────────────────────────────────────────
4. デプロイ キー
────────────────────────────────────────
• 特定のリポジトリにのみアクセスできる SSH キーです。
• リポジトリ自身にキーを紐づけるので、パイプラインやデプロイ専用マシンからのアクセスに便利です。
• 読み取り専用が既定ですが、設定時に書き込み権限を付与することも可能です。

────────────────────────────────────────
5. 2 要素認証 (2FA / MFA)
────────────────────────────────────────
• アカウント保護を強化するための追加レイヤーで、認証コード (アプリ生成 / SMS) による確認を行います。
• 組織所有者は、全メンバーに 2FA を必須化できるため、不正アクセスのリスクを大幅に下げられます。
• 有効化すると、ユーザー名 + パスワード + 追加コード入力が必要になり、セキュリティが向上します。

────────────────────────────────────────
6. SAML シングル サインオン (SSO)
────────────────────────────────────────
• 外部の ID プロバイダー (IdP) と連携し、組織やエンタープライズ全体を一括管理できます。
• GitHub へのアクセス時に、まずは IdP での認証を行い、それに応じてリポジトリやチームにアクセス可能。
• Microsoft Entra ID、Okta、AD FS、PingOne など主要な IdP をサポートしています。
• 大規模組織でユーザーを一元管理する場合に有効です。

────────────────────────────────────────
7. LDAP (GitHub Enterprise Server 向け)
────────────────────────────────────────
• 大規模企業内で Active Directory や OpenLDAP と連携し、ユーザーやグループを集約管理。
• ローカル ディレクトリ サービスを利用してアクセス制御を行いたい場合に適しています。
• 設定は GitHub Enterprise Server 管理画面から行い、認証情報を署名付きにするなど柔軟にカスタマイズ可能。

────────────────────────────────────────
■ まとめ
────────────────────────────────────────

パスワード ベースの基本認証よりも、個人用アクセス トークンや SSH キーなどのセキュアな認証手段を推奨。
大規模・企業向けには、SAML SSO や LDAP 連携でメンバーを一元管理し、不正アクセスを防ぎつつ運用効率を高める。
2 要素認証 (2FA) を組み合わせることで、ユーザー アカウントのセキュリティをさらに強化できる。
いずれの方式を選択する場合も、組織やエンタープライズ規模・セキュリティポリシーに適合するか、メンテナンス負荷やユーザーの利便性を考慮して導入を検討してください。
