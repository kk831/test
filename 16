━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ GitHub.dev エディター
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• 特徴:

ブラウザー上で素早く起動できるエディター。
基本的にコードの編集やコミット、リポジトリ内のファイル閲覧ができる。
コンピューティング リソースが割り当てられないため、ローカル環境で行うようなビルドや実行、ターミナルは利用できない。
ウェブ向けに対応したサブセットの拡張機能のみ利用可能。
• メリット:

セットアップ不要・瞬時にアクセス可能。
すぐにちょっとした修正を行いたいときに便利。
どのリポジトリ、フォーク、Pull Request でも使える。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ GitHub Codespaces
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• 特徴:

クラウド上の VM とコンテナーを使い、ローカル環境のようにビルド・実行・デバッグが可能。
ターミナルや多くの VS Code 拡張機能を利用できる。
devcontainer.json を使用することで、プロジェクトごとに再現性のある環境を構築しやすい。
個人用プランでも無料クォータがあるが、使用量によって課金が発生する場合がある。
• メリット:

実際にアプリケーションを動かしながら開発・デバッグしたい場合に最適。
ローカルに依存しない完成度の高い開発環境を用意できる。
チーム複数人が同じ環境を簡単に再現しやすい。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 使い分けのポイント
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• GitHub.dev:

素早い編集やプルリク、コードレビューなど、大きなビルドや実行を必要としない場合。
小規模な修正・確認で済む場合。
• GitHub Codespaces:

ビルド・デバッグ・テストなど実際にコードを動かす必要がある場合。
devcontainer.json による本格的な環境構築が必要な場合。
ターミナル操作や幅広い拡張機能を活用したい場合。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ Workflow の例: GitHub.dev から Codespaces へ移行
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

まず GitHub.dev 上で簡単な修正やコミットを行う。
実行やデバッグが必要なタイミングになったら、[実行とデバッグ] ビューやターミナルを利用しようとして “利用不可” の通知が表示されたら、Codespaces へ移行。
[作業を続行…] → [新しい Codespace の作成] を選択し、あらかじめコミットしておいた変更が含まれるブランチをベースに Codespace を起動。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ まとめ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• 「少しだけコードを直してすぐコミット」には GitHub.dev。
• 「ビルドやターミナルが必要、ローカルに近いフル機能が欲しい」なら Codespaces。
• GitHub.dev と Codespaces のどちらを使っていても途中で移行できるため、プロジェクトの作業内容や目的に応じて柔軟に切り替えるのがおすすめです。
