━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

強化されたテーブル機能 & ボードビュー
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• テーブルレイアウトでのランク付け・並べ替え・グループ化が容易
• 個々の項目に対してテキスト、数値、日付、単一選択など幅広い型のカスタムフィールドを利用可能
• ボードビューではカード配置やグループ化を柔軟に行いながら、テーブルと同じプロジェクト項目を参照できる
＜メリット＞

シンプルなボードビューから、データ集計に向いたテーブルビューまで切り替えて管理可能
複数視点で同じプロジェクト項目を分析・操作できる
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2. 豊富なデータ管理とリアルタイム更新
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• イテレーション (スプリント/サイクル) など可変期間を扱えるフィールドが追加
• リンクされたプルリクエストやレビュー担当者などをテーブル/ボード両方で表示
• リアルタイムの編集更新・ユーザープレゼンス表示

＜メリット＞

プロジェクト運営時に必要な情報をひとつのビューで確認できる
更新状況がすぐにチーム全員へ反映されるため、状況把握が容易
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3. 柔軟な分析機能
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• ヒストリー付きのグラフ、棒・折れ線・積み上げ面の各種チャートを作成
• sum、count、average、min、max といった集計関数で項目データを分析
• 各グラフは保存や共有用の URL 発行ができる

＜メリット＞

プロジェクトの進捗や残作業を可視化しやすい
レポート作成にも流用でき、関係者への共有がスムーズ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
4. 強化されたオートメーション (GraphQL API / GitHub Actions)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• ProjectsV2 GraphQL API で項目やメタデータを操作可能
• GitHub アプリ スコープや Webhook イベントにも対応
• 新しい Issues や Pull Request を自動でプロジェクトに追加する GitHub Actions が組める

＜GraphQL 操作の例 (ProjectsV2 API)＞
下記は、既存のプロジェクト (Projects v2) に項目を追加する簡単なサンプルです。

GraphQL
mutation AddItemToProject($projectId: ID!, $contentId: ID!) {
  addProjectV2ItemById(input: {
    projectId: $projectId
    contentId: $contentId
  }) {
    item {
      id
    }
  }
}
projectId: Projects v2 の ID (例: "PVT_kwHO...")
contentId: 追加したい Issue や Pull Request のノード ID
＜メリット＞

コード管理だけでなく、プロジェクトそのものをプログラマブルに制御
独自のパイプラインや CI/CD と連携しやすく、開発フローを一元管理
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ まとめ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
• 新しい Projects では、幅広いカスタムフィールドやデータ管理、リアルタイムの更新機能を活用して、放射状に拡張されたプロジェクト管理が可能です。
• さらに GraphQL API や GitHub Actions を組み合わせると、一段と自動化された効率的なワークフローを実現できます。
• これまで Projects (Classic) のカンバン運用だけでは物足りなくなった場合、柔軟に分析したり複数ダッシュボードで管理したりできる点が、新 Projects の大きな強みです。

<詳細リファレンス>
• GitHub Docs: “About projects”
• GitHub Docs: “Using GraphQL with Projects”
• GitHub Docs: “Integrating Projects with GitHub Actions”
