━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 1. Codespace のライフサイクル
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

作成
GitHub.com、VS Code、GitHub CLI、JetBrains IDE 等で作成可能。
テンプレート リポジトリ、ブランチ、Pull Request、コミットといった、さまざまなトリガーから作成できる。
実行 (アクティブ)
Cloud 上の仮想マシンでコンテナーを構築し、開発環境を立ち上げる。
非アクティブ状態が一定時間続くか、あえて停止や終了を行うまで実行される。
停止/再開
Codespace は停止・再起動が可能。
CPU 課金は実行中のみで、停止中はストレージ料金のみが発生。
再構築
Docker イメージや devcontainer.json を更新した後に再構築し、新しい設定を反映させることができる。
/workspaces ディレクトリ以下のファイルは保持されるが、それ以外の変更はクリアされる点に注意。
削除
不要になった Codespace は削除する。
リモートにプッシュしていない作業を削除前にコミット・プッシュしないと失われるので注意。
一定期間 (既定 30 日) 非アクティブ状態が続くと自動的に削除される。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 2. 開発フローと保存・共有
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

作業内容は Cloud 上の仮想マシンに保存される。
Web 経由 (ブラウザの VS Code) では、自動保存がデフォルトで有効。
ローカル VS Code が Codespace に接続する場合は、自動保存のオプションを手動でオンにする。
コミットしてリモート リポジトリにプッシュすれば変更内容が安全に保存・共有される。
テンプレートから Codespace を作成した場合、作業を別のリポジトリに公開して永続化できる。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 3. ネットワーク接続とタイムアウト
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Codespace の利用にはインターネット接続が必須。
接続中断があっても、未コミットの変更はクラウド上に保存されているため、再接続すれば続きから再開可能。
非アクティブ状態が続くと既定で 30 分後にタイムアウトし停止する (再開すれば作業は継続)。
個人または組織のポリシーでタイムアウト時間を調整可能。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 4. 複数 Codespace や長期運用
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1 つのリポジトリに複数の Codespace をブランチごと等で作成できるが、上限数がある。
長期運用の Codespace でも、プル/プッシュでブランチ内容を最新化してローカル開発のように管理する。
定期的にコミット・プッシュしないと、Codespace 削除時やエラー時に作業が失われるリスクがある。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ 5. 再構築とエラー対処
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

devcontainer などの設定を変更したら、Codespace を「再構築」するか「新規作成」して変更を反映。
場合によっては、エラーや予期しない問題が発生したときに停止・再起動または再作成が有効。
再構築ではキャッシュ済みのイメージを使用して高速化が可能。完全な再構築ではイメージ キャッシュをクリアする。
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■ まとめ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Codespace はクラウド上で実行される仮想マシンと Docker コンテナーを通じて、柔軟かつ再現性の高い開発環境を提供します。作成・停止・削除といったライフサイクル管理を行いながら、Git のプッシュ/プルやコンテナー再構築によって変更内容・設定を安全に維持・適用できます。開発の効率を高めるうえで、Codespace の各ステップを把握して適切に管理することが重要です。
